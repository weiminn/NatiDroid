API to Protection Mapping for AOSP 6.0.1: 


Landroid/accounts/AbstractAccountAuthenticator$Transport.addAccount(Landroid/accounts/IAccountAuthenticatorResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.addAccountFromCredentials(Landroid/accounts/IAccountAuthenticatorResponse;Landroid/accounts/Account;Landroid/os/Bundle;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.confirmCredentials(Landroid/accounts/IAccountAuthenticatorResponse;Landroid/accounts/Account;Landroid/os/Bundle;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.editProperties(Landroid/accounts/IAccountAuthenticatorResponse;Ljava/lang/String;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.getAccountCredentialsForCloning(Landroid/accounts/IAccountAuthenticatorResponse;Landroid/accounts/Account;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.getAccountRemovalAllowed(Landroid/accounts/IAccountAuthenticatorResponse;Landroid/accounts/Account;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.getAuthToken(Landroid/accounts/IAccountAuthenticatorResponse;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.getAuthTokenLabel(Landroid/accounts/IAccountAuthenticatorResponse;Ljava/lang/String;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.hasFeatures(Landroid/accounts/IAccountAuthenticatorResponse;Landroid/accounts/Account;[Ljava/lang/String;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/accounts/AbstractAccountAuthenticator$Transport.updateCredentials(Landroid/accounts/IAccountAuthenticatorResponse;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
	 [   android.permission.ACCOUNT_MANAGER ]

Landroid/hardware/location/ActivityRecognitionHardware.disableActivityEvent(Ljava/lang/String;I)Z
	 [   android.permission.LOCATION_HARDWARE ]

Landroid/hardware/location/ActivityRecognitionHardware.enableActivityEvent(Ljava/lang/String;IJ)Z
	 [   android.permission.LOCATION_HARDWARE ]

Landroid/hardware/location/ActivityRecognitionHardware.flush()Z
	 [   android.permission.LOCATION_HARDWARE ]

Landroid/hardware/location/ActivityRecognitionHardware.getSupportedActivities()[Ljava/lang/String;
	 [   android.permission.LOCATION_HARDWARE ]

Landroid/hardware/location/ActivityRecognitionHardware.isActivitySupported(Ljava/lang/String;)Z
	 [   android.permission.LOCATION_HARDWARE ]

Landroid/hardware/location/ActivityRecognitionHardware.registerSink(Landroid/hardware/location/IActivityRecognitionHardwareSink;)Z
	 [   android.permission.LOCATION_HARDWARE ]

Landroid/hardware/location/ActivityRecognitionHardware.unregisterSink(Landroid/hardware/location/IActivityRecognitionHardwareSink;)Z
	 [   android.permission.LOCATION_HARDWARE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getLine1Number(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]
	 OR
	 [ android.permission.READ_SMS ]

Lcom/android/internal/telephony/PhoneSubInfoController.getVoiceMailAlphaTagForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getSubscriberIdForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getGroupIdLevel1ForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIccSerialNumberForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIsimChallengeResponse(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getGroupIdLevel1(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getVoiceMailAlphaTag(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getDeviceSvnUsingSubId(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getLine1AlphaTag(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getMsisdn(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIccSerialNumber(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIsimIst()Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIsimDomain()Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getLine1NumberForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]
	 OR
	 [ android.permission.READ_SMS ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIsimImpu()[Ljava/lang/String;
	 [ android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIsimImpi()Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getSubscriberId(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getVoiceMailNumber(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getNaiForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getMsisdnForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getVoiceMailNumberForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getDeviceId(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getCompleteVoiceMailNumber()Ljava/lang/String;
	 [ android.permission.CALL_PRIVILEGED ]

Lcom/android/internal/telephony/PhoneSubInfoController.getDeviceSvn(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getLine1AlphaTagForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIsimPcscf()[Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getCompleteVoiceMailNumberForSubscriber(I)Ljava/lang/String;
	 [ android.permission.CALL_PRIVILEGED ]

Lcom/android/internal/telephony/PhoneSubInfoController.getDeviceIdForPhone(I)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIccSimChallengeResponse(IILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/PhoneSubInfoController.getIsimChallengeResponseForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setDisplayNumber(Ljava/lang/String;I)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setDisplayNameUsingSrc(Ljava/lang/String;IJ)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.addSubInfoRecord(Ljava/lang/String;I)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setDefaultDataSubId(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getActiveSubscriptionInfo(ILjava/lang/String;)Landroid/telephony/SubscriptionInfo;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getActiveSubscriptionInfoList(Ljava/lang/String;)Ljava/util/List;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getActiveSubscriptionInfoForIccId(Ljava/lang/String;Ljava/lang/String;)Landroid/telephony/SubscriptionInfo;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getSubscriptionProperty(ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setDataRoaming(II)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setDisplayName(Ljava/lang/String;I)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getAllSubInfoList(Ljava/lang/String;)Ljava/util/List;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setIconTint(II)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getAllSubInfoCount(Ljava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getActiveSubInfoCount(Ljava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setDefaultVoiceSubId(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setSubscriptionProperty(ILjava/lang/String;Ljava/lang/String;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.clearDefaultsForInactiveSubIds()V
	 [ android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.getActiveSubscriptionInfoForSimSlotIndex(ILjava/lang/String;)Landroid/telephony/SubscriptionInfo;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.READ_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.clearSubInfo()I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/SubscriptionController.setDefaultSmsSubId(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/internal/telephony/UiccPhoneBookController.updateAdnRecordsInEfBySearch(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
	 [ android.permission.WRITE_CONTACTS ]

Lcom/android/internal/telephony/UiccPhoneBookController.getAdnRecordsInEfForSubscriber(II)Ljava/util/List;
	 [ android.permission.READ_CONTACTS ]

Lcom/android/internal/telephony/UiccPhoneBookController.updateAdnRecordsInEfByIndex(ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
	 [ android.permission.WRITE_CONTACTS ]

Lcom/android/internal/telephony/UiccPhoneBookController.updateAdnRecordsInEfBySearchForSubscriber(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
	 [ android.permission.WRITE_CONTACTS ]

Lcom/android/internal/telephony/UiccPhoneBookController.updateAdnRecordsInEfByIndexForSubscriber(IILjava/lang/String;Ljava/lang/String;ILjava/lang/String;)Z
	 [ android.permission.WRITE_CONTACTS ]

Lcom/android/internal/telephony/UiccPhoneBookController.getAdnRecordsInEf(I)Ljava/util/List;
	 [ android.permission.READ_CONTACTS ]

Lcom/android/internal/telephony/UiccSmsController.sendMultipartTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;Z)V
	 [ android.permission.SEND_SMS AND android.permission.SEND_RESPOND_VIA_MESSAGE ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 0 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 1 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 2 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.getPremiumSmsPermission() = 3 ]

Lcom/android/internal/telephony/UiccSmsController.updateMessageOnIccEfForSubscriber(ILjava/lang/String;II[B)Z
	 [ android.permission.RECEIVE_SMS AND android.permission.SEND_SMS ]

Lcom/android/internal/telephony/UiccSmsController.sendStoredMultipartText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
	 [ android.permission.SEND_SMS AND android.permission.SEND_RESPOND_VIA_MESSAGE ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 0 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 1 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 2 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.getPremiumSmsPermission() = 3 ]

Lcom/android/internal/telephony/UiccSmsController.getAllMessagesFromIccEfForSubscriber(ILjava/lang/String;)Ljava/util/List;
	 [ android.permission.RECEIVE_SMS ]

Lcom/android/internal/telephony/UiccSmsController.sendTextForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
	 [ android.permission.SEND_SMS AND android.permission.SEND_RESPOND_VIA_MESSAGE ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 0 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 1 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 2 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.getPremiumSmsPermission() = 3 ]

Lcom/android/internal/telephony/UiccSmsController.disableCellBroadcastRangeForSubscriber(IIII)Z
	 [   android.permission.RECEIVE_SMS ]

Lcom/android/internal/telephony/UiccSmsController.sendDataForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
	 [ android.permission.SEND_SMS AND android.permission.SEND_RESPOND_VIA_MESSAGE ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 0 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 1 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 2 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.getPremiumSmsPermission() = 3 ]

Lcom/android/internal/telephony/UiccSmsController.sendTextForSubscriber(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;Z)V
	 [ android.permission.SEND_SMS AND android.permission.SEND_RESPOND_VIA_MESSAGE ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 0 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 1 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 2 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.getPremiumSmsPermission() = 3 ]

Lcom/android/internal/telephony/UiccSmsController.enableCellBroadcastForSubscriber(III)Z
	 [   android.permission.RECEIVE_SMS ]

Lcom/android/internal/telephony/UiccSmsController.sendStoredText(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V
	 [ android.permission.SEND_SMS AND android.permission.SEND_RESPOND_VIA_MESSAGE ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 0 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 1 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 2 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.getPremiumSmsPermission() = 3 ]

Lcom/android/internal/telephony/UiccSmsController.disableCellBroadcastForSubscriber(III)Z
	 [   android.permission.RECEIVE_SMS ]

Lcom/android/internal/telephony/UiccSmsController.sendDataForSubscriberWithSelfPermissions(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V
	 [ android.permission.SEND_SMS AND android.permission.SEND_RESPOND_VIA_MESSAGE ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 0 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 1 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.checkDestination() = 2 ]
	 OR
	 [ android.permission.SEND_SMS AND SmsUsageMonitor.getPremiumSmsPermission() = 3 ]

Lcom/android/internal/telephony/UiccSmsController.enableCellBroadcastRangeForSubscriber(IIII)Z
	 [   android.permission.RECEIVE_SMS ]

Lcom/android/internal/telephony/UiccSmsController.injectSmsPduForSubscriber(I[BLjava/lang/String;Landroid/app/PendingIntent;)V
	 [ android.permission.RECEIVE_SMS ]

Lcom/android/internal/telephony/UiccSmsController.copyMessageToIccEfForSubscriber(ILjava/lang/String;I[B[B)Z
	 [ android.permission.RECEIVE_SMS AND android.permission.SEND_SMS ]

Lcom/android/nfc/NfcService$NfcAdapterService.addNfcUnlockHandler(Landroid/nfc/INfcUnlockHandler;[I)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.disable(ILandroid/os/IBinder;Ljava/lang/String;)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.disableNdefPush()Z
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.dispatch(Landroid/nfc/Tag;)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.enable()Z
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.enableNdefPush()Z
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.invokeBeam()V
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$NfcAdapterService.invokeBeamInternal(Landroid/nfc/BeamShareData;)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.pausePolling(I)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.resumePolling()V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.setAppCallback(Landroid/nfc/IAppCallback;)V
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$NfcAdapterService.setForegroundDispatch(Landroid/app/PendingIntent;[Landroid/content/IntentFilter;Landroid/nfc/TechListParcel;)V
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$NfcAdapterService.setP2pModes(II)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/NfcService$NfcAdapterService.verifyNfcPermission()V
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.close(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.connect(II)I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.formatNdef(I[B)I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.getTechList(I)[I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.getTimeout(I)I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.isNdef(I)Z
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.ndefMakeReadOnly(I)I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.ndefRead(I)Landroid/nfc/NdefMessage;
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.ndefWrite(ILandroid/nfc/NdefMessage;)I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.reconnect(I)I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.rediscover(I)Landroid/nfc/Tag;
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.resetTimeouts()V
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.setTimeout(II)I
	 [   android.permission.NFC ]

Lcom/android/nfc/NfcService$TagService.transceive(I[BZ)Landroid/nfc/TransceiveResult;
	 [   android.permission.NFC ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.getAidGroupForService(ILandroid/content/ComponentName;Ljava/lang/String;)Landroid/nfc/cardemulation/AidGroup;
	 [   android.permission.NFC ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.getServices(ILjava/lang/String;)Ljava/util/List;
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.isDefaultServiceForAid(ILandroid/content/ComponentName;Ljava/lang/String;)Z
	 [   android.permission.NFC ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.isDefaultServiceForCategory(ILandroid/content/ComponentName;Ljava/lang/String;)Z
	 [   android.permission.NFC ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.registerAidGroupForService(ILandroid/content/ComponentName;Landroid/nfc/cardemulation/AidGroup;)Z
	 [   android.permission.NFC ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.removeAidGroupForService(ILandroid/content/ComponentName;Ljava/lang/String;)Z
	 [   android.permission.NFC ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.setDefaultForNextTap(ILandroid/content/ComponentName;)Z
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.setDefaultServiceForCategory(ILandroid/content/ComponentName;Ljava/lang/String;)Z
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.setPreferredService(Landroid/content/ComponentName;)Z
	 [   android.permission.NFC ]

Lcom/android/nfc/cardemulation/CardEmulationManager$CardEmulationInterface.unsetPreferredService()Z
	 [   android.permission.NFC ]

Lcom/android/phone/CarrierConfigLoader.getConfigForSubId(I)Landroid/os/PersistableBundle;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/phone/CarrierConfigLoader.updateConfigForPhoneId(ILjava/lang/String;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.answerRingingCall()V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.answerRingingCallForSubscriber(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.call(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CALL_PHONE ]

Lcom/android/phone/PhoneInterfaceManager.canChangeDtmfToneLength()Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.disableDataConnectivity()Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.disableLocationUpdates()V
	 [   android.permission.CONTROL_LOCATION_UPDATES ]

Lcom/android/phone/PhoneInterfaceManager.disableLocationUpdatesForSubscriber(I)V
	 [   android.permission.CONTROL_LOCATION_UPDATES ]

Lcom/android/phone/PhoneInterfaceManager.enableDataConnectivity()Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.enableLocationUpdates()V
	 [   android.permission.CONTROL_LOCATION_UPDATES ]

Lcom/android/phone/PhoneInterfaceManager.enableLocationUpdatesForSubscriber(I)V
	 [   android.permission.CONTROL_LOCATION_UPDATES ]

Lcom/android/phone/PhoneInterfaceManager.enableVideoCalling(Z)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.endCall()Z
	 [   android.permission.CALL_PHONE ]

Lcom/android/phone/PhoneInterfaceManager.endCallForSubscriber(I)Z
	 [   android.permission.CALL_PHONE ]

Lcom/android/phone/PhoneInterfaceManager.factoryReset(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL AND android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getAllCellInfo(Ljava/lang/String;)Ljava/util/List;
	 [   android.permission.ACCESS_FINE_LOCATION AND Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [   android.permission.ACCESS_COARSE_LOCATION AND Binder.getCallingUid() = Process.myUid () ]
	 OR
	 [   android.permission.ACCESS_FINE_LOCATION AND UserHandle.getCallingUserId() = ActivityManager.getCurrentUser() ]
	 OR
	 [   android.permission.ACCESS_COARSE_LOCATION AND UserHandle.getCallingUserId() = ActivityManager.getCurrentUser() ]

Lcom/android/phone/PhoneInterfaceManager.getCalculatedPreferredNetworkType(Ljava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaEriIconIndex(Ljava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaEriIconIndexForSubscriber(ILjava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaEriIconMode(Ljava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaEriIconModeForSubscriber(ILjava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaEriText(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaEriTextForSubscriber(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaMdn(I)Ljava/lang/String;
	 [  android.permission.READ_PHONE_STATE ]
	 OR
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCdmaMin(I)Ljava/lang/String;
	 [  android.permission.READ_PHONE_STATE ]
	 OR
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getCellLocation(Ljava/lang/String;)Landroid/os/Bundle;
	 [   android.permission.ACCESS_FINE_LOCATION AND Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [   android.permission.ACCESS_COARSE_LOCATION AND Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [   android.permission.ACCESS_FINE_LOCATION AND UserHandle.getCallingUser() = ActivityManager.getCurrentUser() ]
	 OR
	 [   android.permission.ACCESS_COARSE_LOCATION AND UserHandle.getCallingUser() = ActivityManager.getCurrentUser() ]

Lcom/android/phone/PhoneInterfaceManager.getCellNetworkScanResults(I)Lcom/android/internal/telephony/CellNetworkScanResult;
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getDataEnabled(I)Z
	 [   android.permission.ACCESS_NETWORK_STATE ]
	 OR
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getDataNetworkType(Ljava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getDataNetworkTypeForSubscriber(ILjava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getDeviceId(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getLine1AlphaTagForDisplay(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getLine1NumberForDisplay(ILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getLteOnCdmaMode(Ljava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getLteOnCdmaModeForSubscriber(ILjava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getMergedSubscriberIds(Ljava/lang/String;)[Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getNeighboringCellInfo(Ljava/lang/String;)Ljava/util/List;
	 [   android.permission.ACCESS_FINE_LOCATION AND Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [   android.permission.ACCESS_COARSE_LOCATION AND Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [   android.permission.ACCESS_FINE_LOCATION AND UserHandle.getCallingUser() = ActivityManager.getCurrentUser() ]
	 OR
	 [   android.permission.ACCESS_COARSE_LOCATION AND UserHandle.getCallingUser() = ActivityManager.getCurrentUser() ]

Lcom/android/phone/PhoneInterfaceManager.getNetworkTypeForSubscriber(ILjava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getPcscfAddress(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getPreferredNetworkType(I)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getRadioAccessFamily(ILjava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getTetherApnRequired()I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.getVoiceNetworkTypeForSubscriber(ILjava/lang/String;)I
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.handlePinMmi(Ljava/lang/String;)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.handlePinMmiForSubscriber(ILjava/lang/String;)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.iccCloseLogicalChannel(I)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.iccExchangeSimIO(IIIIILjava/lang/String;)[B
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.iccOpenLogicalChannel(Ljava/lang/String;)Landroid/telephony/IccOpenLogicalChannelResponse;
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.iccTransmitApduBasicChannel(IIIIILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.iccTransmitApduLogicalChannel(IIIIIILjava/lang/String;)Ljava/lang/String;
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.invokeOemRilRequestRaw([B[B)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isIdle(Ljava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isIdleForSubscriber(ILjava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isOffhook(Ljava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isOffhookForSubscriber(ILjava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isRadioOn(Ljava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isRadioOnForSubscriber(ILjava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isRinging(Ljava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isRingingForSubscriber(ILjava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isSimPinEnabled(Ljava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isVideoCallingEnabled(Ljava/lang/String;)Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [  android.permission.READ_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.isWorldPhone()Z
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.nvReadItem(I)Ljava/lang/String;
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.nvResetConfig(I)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.nvWriteCdmaPrl([B)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.nvWriteItem(ILjava/lang/String;)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.sendEnvelopeWithStatus(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setDataEnabled(IZ)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setImsRegistrationState(Z)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setNetworkSelectionModeAutomatic(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setNetworkSelectionModeManual(ILcom/android/internal/telephony/OperatorInfo;Z)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setPreferredNetworkType(II)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setRadio(Z)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setRadioForSubscriber(IZ)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.setRadioPower(Z)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.shutdownMobileRadios()V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPin(Ljava/lang/String;)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPinForSubscriber(ILjava/lang/String;)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPinReportResult(Ljava/lang/String;)[I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPinReportResultForSubscriber(ILjava/lang/String;)[I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPuk(Ljava/lang/String;Ljava/lang/String;)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPukForSubscriber(ILjava/lang/String;Ljava/lang/String;)Z
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPukReportResult(Ljava/lang/String;Ljava/lang/String;)[I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.supplyPukReportResultForSubscriber(ILjava/lang/String;Ljava/lang/String;)[I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.toggleRadioOnOff()V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/phone/PhoneInterfaceManager.toggleRadioOnOffForSubscriber(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/AlarmManagerService$2.setTime(J)Z
	 [ android.permission.SET_TIME_ZONE ]

Lcom/android/server/AlarmManagerService$2.setTimeZone(Ljava/lang/String;)V
	 [ android.permission.SET_TIME ]

Lcom/android/server/AlarmManagerService$2.set(IJJJILandroid/app/PendingIntent;Landroid/os/WorkSource;Landroid/app/AlarmManager$AlarmClockInfo;)V
	 [ android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/AppOpsService.resetAllModes(ILjava/lang/String;)V
	 [   android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.checkAudioOperation(IIILjava/lang/String;)I
	 [ x3 = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.setUidMode(III)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.startOperation(Landroid/os/IBinder;IILjava/lang/String;)I
	 [ x3 = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.removeUser(I)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/AppOpsService.setAudioRestriction(IIII[Ljava/lang/String;)V
	 [ x3 = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.finishOperation(Landroid/os/IBinder;IILjava/lang/String;)V
	 [ x3 = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.getPackagesForOps([I)Ljava/util/List;
	 [   android.permission.GET_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.setMode(IILjava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.checkOperation(IILjava/lang/String;)I
	 [ x2 = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.getOpsForPackage(ILjava/lang/String;[I)Ljava/util/List;
	 [ android.permission.GET_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.noteOperation(IILjava/lang/String;)I
	 [ x2 = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/AppOpsService.setUserRestrictions(Landroid/os/Bundle;I)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/BluetoothManagerService.getAddress()Ljava/lang/String;
	 [ android.permission.BLUETOOTH AND Binder.getCallingUid() = 1000 AND android.permission.LOCAL_MAC_ADDRESS ]
	 OR
	 [ android.permission.BLUETOOTH; AND ActivityManager.getCurrentUser() = UserHandle.getCallingUserId() AND android.permission.LOCAL_MAC_ADDRESS ]
	 OR
	 [ android.permission.BLUETOOTH; AND Binder.getCallingUid() = 1027 AND android.permission.LOCAL_MAC_ADDRESS ]
	 OR
	 [ android.permission.BLUETOOTH; AND Binder.getCallingUid() = PackageManager.getPackageUid($com.android.systemui$) AND android.permission.LOCAL_MAC_ADDRESS ]

Lcom/android/server/BluetoothManagerService.registerStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V
	 [   android.permission.BLUETOOTH ]

Lcom/android/server/BluetoothManagerService.enable()Z
	 [   android.permission.BLUETOOTH_ADMIN AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.BLUETOOTH_ADMIN AND ActivityManager.getCurrentUser() = UserHandle.getCallingUserId() ]
	 OR
	 [   android.permission.BLUETOOTH_ADMIN AND Binder.getCallingUid() = 1027 ]
	 OR
	 [   android.permission.BLUETOOTH_ADMIN AND Binder.getCallingUid() = PackageManager.getPackageUid($com.android.systemui$) ]

Lcom/android/server/BluetoothManagerService.enableNoAutoConnect()Z
	 [   android.permission.BLUETOOTH_ADMIN AND UserHandle.getAppId(Binde.getCallingUid()) = 1027 ]

Lcom/android/server/BluetoothManagerService.unregisterAdapter(Landroid/bluetooth/IBluetoothManagerCallback;)V
	 [   android.permission.BLUETOOTH ]

Lcom/android/server/BluetoothManagerService.unregisterStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V
	 [   android.permission.BLUETOOTH ]

Lcom/android/server/BluetoothManagerService.getName()Ljava/lang/String;
	 [ android.permission.BLUETOOTH AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.BLUETOOTH; AND ActivityManager.getCurrentUser() = UserHandle.getCallingUserId() ]
	 OR
	 [ android.permission.BLUETOOTH; AND Binder.getCallingUid() = 1027 ]
	 OR
	 [ android.permission.BLUETOOTH; AND Binder.getCallingUid() = PackageManager.getPackageUid($com.android.systemui$) ]

Lcom/android/server/BluetoothManagerService.disable(Z)Z
	 [   android.permission.BLUETOOTH_ADMIN AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.BLUETOOTH_ADMIN AND ActivityManager.getCurrentUser() = UserHandle.getCallingUserId() ]
	 OR
	 [   android.permission.BLUETOOTH_ADMIN AND Binder.getCallingUid() = 1027 ]
	 OR
	 [   android.permission.BLUETOOTH_ADMIN AND Binder.getCallingUid() = PackageManager.getPackageUid($com.android.systemui$) ]

Lcom/android/server/ConnectivityService.getTetherableIfaces()[Ljava/lang/String;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getAllNetworkInfo()[Landroid/net/NetworkInfo;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getTetheredDhcpRanges()[Ljava/lang/String;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.getLegacyVpnInfo(I)Lcom/android/internal/net/LegacyVpnInfo;
	 [  UserHandle.getCallingUserId() = x1 AND android.permission.CONTROL_VPN ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.CONTROL_VPN ]

Lcom/android/server/ConnectivityService.getMobileProvisioningUrl()Ljava/lang/String;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.reportNetworkConnectivity(Landroid/net/Network;Z)V
	 [ android.permission.ACCESS_NETWORK_STATE; AND android.permission.INTERNET ]

Lcom/android/server/ConnectivityService.getTetherableBluetoothRegexs()[Ljava/lang/String;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.requestBandwidthUpdate(Landroid/net/Network;)Z
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.factoryReset()V
	 [   android.permission.CONNECTIVITY_INTERNAL AND !UserManager.hasUserRestriction($no_network_reset$) AND !UserManager.hasUserRestriction($no_config_tethering$) AND !UserManager.hasUserRestriction($no_config_vpn$) AND   android.permission.ACCESS_NETWORK_STATE AND android.permission.CHANGE_NETWORK_STATE AND android.permission.CONTROL_VPN ]

Lcom/android/server/ConnectivityService.getTetheringErroredIfaces()[Ljava/lang/String;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.untether(Ljava/lang/String;)I
	 [ android.permission.CONNECTIVITY_INTERNAL AND android.permission.ACCESS_NETWORK_STATE AND android.permission.TETHER_PRIVILEGED AND !UserManager.hasUserRestriction($no_config_tethering$) ]
	 OR
	 [ android.permission.WRITE_SETTINGS AND android.permission.ACCESS_NETWORK_STATE AND android.permission.TETHER_PRIVILEGED AND !UserManager.hasUserRestriction($no_config_tethering$) ]

Lcom/android/server/ConnectivityService.getDefaultNetworkCapabilitiesForUser(I)[Landroid/net/NetworkCapabilities;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getActiveLinkProperties()Landroid/net/LinkProperties;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.setAirplaneMode(Z)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.prepareVpn(Ljava/lang/String;Ljava/lang/String;I)Z
	 [  UserHandle.getCallingUserId() = x3 AND android.permission.CONTROL_VPN ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.CONTROL_VPN ]

Lcom/android/server/ConnectivityService.getVpnConfig(I)Lcom/android/internal/net/VpnConfig;
	 [  UserHandle.getCallingUserId() = x1 AND android.permission.CONTROL_VPN ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.CONTROL_VPN ]

Lcom/android/server/ConnectivityService.getAllNetworkState()[Landroid/net/NetworkState;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.reportInetCondition(II)V
	 [ android.permission.ACCESS_NETWORK_STATE; AND android.permission.INTERNET ]

Lcom/android/server/ConnectivityService.listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;
	 [ x1[] != 1 AND android.permission.ACCESS_NETWORK_STATE ]
	 OR
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getTetherableUsbRegexs()[Ljava/lang/String;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.isTetheringSupported()Z
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;I)Landroid/net/NetworkRequest;
	 [ !x1.hasCapability(13) AND   android.permission.CONNECTIVITY_INTERNAL ]
	 OR
	 [ x1.hasCapability(13) AND android.permission.CHANGE_NETWORK_STATE ]
	 OR
	 [ x1.hasCapability(13) AND android.permission.WRITE_SETTINGS ]

Lcom/android/server/ConnectivityService.isNetworkSupported(I)Z
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.setAcceptUnvalidated(Landroid/net/Network;ZZ)V
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkMisc;)I
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.requestRouteToHostAddress(I[B)Z
	 [ android.permission.CHANGE_NETWORK_STATE AND !(mProtectedNetworks.contains(x1)) ]
	 OR
	 [ android.permission.WRITE_SETTINGS AND !(mProtectedNetworks.contains(x1))!(mProtectedNetworks.contains(x1)) ]
	 OR
	 [ android.permission.CHANGE_NETWORK_STATE AND mProtectedNetworks.contains(x1) AND   android.permission.CONNECTIVITY_INTERNAL ]
	 OR
	 [ android.permission.WRITE_SETTINGS AND mProtectedNetworks.contains(x1) AND   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.getNetworkInfo(I)Landroid/net/NetworkInfo;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.tether(Ljava/lang/String;)I
	 [ android.permission.CONNECTIVITY_INTERNAL AND android.permission.ACCESS_NETWORK_STATE AND android.permission.TETHER_PRIVILEGED AND !UserManager.hasUserRestriction($no_config_tethering$) ]
	 OR
	 [ android.permission.WRITE_SETTINGS AND android.permission.ACCESS_NETWORK_STATE AND android.permission.TETHER_PRIVILEGED AND !UserManager.hasUserRestriction($no_config_tethering$) ]

Lcom/android/server/ConnectivityService.startNattKeepalive(Landroid/net/Network;ILandroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;ILjava/lang/String;)V
	 [   android.permission.PACKET_KEEPALIVE_OFFLOAD ]

Lcom/android/server/ConnectivityService.getActiveNetworkInfo()Landroid/net/NetworkInfo;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.setUsbTethering(Z)I
	 [ android.permission.CONNECTIVITY_INTERNAL AND android.permission.ACCESS_NETWORK_STATE AND   android.permission.MANAGE_USB AND android.permission.TETHER_PRIVILEGED AND !UserManager.hasUserRestriction($no_config_tethering$) ]
	 OR
	 [ android.permission.WRITE_SETTINGS AND android.permission.ACCESS_NETWORK_STATE AND   android.permission.MANAGE_USB AND android.permission.TETHER_PRIVILEGED AND !UserManager.hasUserRestriction($no_config_tethering$) ]

Lcom/android/server/ConnectivityService.getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)Landroid/net/NetworkRequest;
	 [ !x1.hasCapability(13) AND   android.permission.CONNECTIVITY_INTERNAL ]
	 OR
	 [ x1.hasCapability(13) AND android.permission.CHANGE_NETWORK_STATE ]
	 OR
	 [ x1.hasCapability(13) AND android.permission.WRITE_SETTINGS ]

Lcom/android/server/ConnectivityService.getActiveNetwork()Landroid/net/Network;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.isActiveNetworkMetered()Z
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getLastTetherError(Ljava/lang/String;)I
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getAllNetworks()[Landroid/net/Network;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getLinkPropertiesForType(I)Landroid/net/LinkProperties;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getAllVpnInfo()[Lcom/android/internal/net/VpnInfo;
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.setVpnPackageAuthorization(Ljava/lang/String;IZ)V
	 [  UserHandle.getCallingUserId() = x2 AND android.permission.CONTROL_VPN ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.CONTROL_VPN ]

Lcom/android/server/ConnectivityService.pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)V
	 [ x1[] != 1 AND android.permission.ACCESS_NETWORK_STATE ]
	 OR
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.setProvisioningNotificationVisible(ZILjava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.updateLockdownVpn()Z
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/ConnectivityService.unregisterNetworkFactory(Landroid/os/Messenger;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.getTetherableWifiRegexs()[Ljava/lang/String;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getTetheredIfaces()[Ljava/lang/String;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getNetworkForType(I)Landroid/net/Network;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.startLegacyVpn(Lcom/android/internal/net/VpnProfile;)V
	 [ android.permission.ACCESS_NETWORK_STATE; AND android.permission.CONTROL_VPN ]

Lcom/android/server/ConnectivityService.registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.setGlobalProxy(Landroid/net/ProxyInfo;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConnectivityService.getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getNetworkInfoForNetwork(Landroid/net/Network;)Landroid/net/NetworkInfo;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/ConnectivityService.getActiveNetworkInfoForUid(I)Landroid/net/NetworkInfo;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/ConsumerIrService.getCarrierFrequencies()[I
	 [ android.permission.TRANSMIT_IR ]

Lcom/android/server/ConsumerIrService.transmit(Ljava/lang/String;I[I)V
	 [ android.permission.TRANSMIT_IR ]

Lcom/android/server/DeviceIdleController$BinderService.addPowerSaveTempWhitelistAppForMms(Ljava/lang/String;ILjava/lang/String;)J
	 [ android.permission.CHANGE_APP_IDLE_STATE AND mPowerSaverWhiteListSystemAppIds.get(Binder.getCallingUid()) ]

Lcom/android/server/DeviceIdleController$BinderService.addPowerSaveTempWhitelistAppForSms(Ljava/lang/String;ILjava/lang/String;)J
	 [ android.permission.CHANGE_APP_IDLE_STATE AND mPowerSaverWhiteListSystemAppIds.get(Binder.getCallingUid()) ]

Lcom/android/server/DeviceIdleController$BinderService.exitIdle(Ljava/lang/String;)V
	 [ android.permission.DEVICE_POWER ]

Lcom/android/server/DeviceIdleController$BinderService.addPowerSaveWhitelistApp(Ljava/lang/String;)V
	 [ android.permission.DEVICE_POWER ]

Lcom/android/server/DeviceIdleController$BinderService.addPowerSaveTempWhitelistApp(Ljava/lang/String;JILjava/lang/String;)V
	 [ android.permission.CHANGE_APP_IDLE_STATE AND mPowerSaverWhiteListSystemAppIds.get(Binder.getCallingUid()) ]

Lcom/android/server/DeviceIdleController$BinderService.removePowerSaveWhitelistApp(Ljava/lang/String;)V
	 [ android.permission.DEVICE_POWER ]

Lcom/android/server/DropBoxManagerService.getNextEntry(Ljava/lang/String;J)Landroid/os/DropBoxManager$Entry;
	 [ android.permission.READ_LOGS ]

Lcom/android/server/GraphicsStatsService.requestBufferForProcess(Ljava/lang/String;Landroid/os/IBinder;)Landroid/os/ParcelFileDescriptor;
	 [ AppOpps.checkPackage(Binder.getCallingUid() ,  x1) ]

Lcom/android/server/InputMethodManagerService.notifySuggestionPicked(Landroid/text/style/SuggestionSpan;Ljava/lang/String;I)Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.removeClient(Lcom/android/internal/view/IInputMethodClient;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.hideSoftInput(Lcom/android/internal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.showInputMethodPickerFromClient(Lcom/android/internal/view/IInputMethodClient;I)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.setAdditionalInputMethodSubtypes(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.switchToNextInputMethod(Landroid/os/IBinder;Z)Z
	 [ Binder.getCallingUid() = 1000 AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/InputMethodManagerService.getInputMethodList()Ljava/util/List;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.switchToLastInputMethod(Landroid/os/IBinder;)Z
	 [ Binder.getCallingUid() = 1000 AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/InputMethodManagerService.getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.setCurrentInputMethodSubtype(Landroid/view/inputmethod/InputMethodSubtype;)Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.shouldOfferSwitchingToNextInputMethod(Landroid/os/IBinder;)Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.showMySoftInput(Landroid/os/IBinder;I)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.hideMySoftInput(Landroid/os/IBinder;I)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.setInputMethodAndSubtype(Landroid/os/IBinder;Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)V
	 [ Binder.getCallingUid() = 1000 AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/InputMethodManagerService.getEnabledInputMethodList()Ljava/util/List;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.addClient(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;II)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.setInputMethodEnabled(Ljava/lang/String;Z)Z
	 [ Binder.getCallingUid() = 1000 AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/InputMethodManagerService.showSoftInput(Lcom/android/internal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.setInputMethod(Landroid/os/IBinder;Ljava/lang/String;)V
	 [ Binder.getCallingUid() = 1000 AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) AND android.permission.WRITE_SECURE_SETTINGS ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/InputMethodManagerService.registerSuggestionSpansForNotification([Landroid/text/style/SuggestionSpan;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.startInput(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;Landroid/view/inputmethod/EditorInfo;I)Lcom/android/internal/view/InputBindResult;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/InputMethodManagerService.windowGainedFocus(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;)Lcom/android/internal/view/InputBindResult;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.isCurrentProfile(UserHandle.getUserId(Binder.getCallingUid())) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/LocationManagerService.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
	 [ android.permission.ACCESS_COARSE_LOCATION ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION ]

Lcom/android/server/LocationManagerService.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() = $gps$ AND android.permission.ACCESS_LOCATION_EXTRA_COMMANDS ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() =$passive$ AND android.permission.ACCESS_LOCATION_EXTRA_COMMANDS ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $network$ AND android.permission.ACCESS_LOCATION_EXTRA_COMMANDS ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $fused$ AND android.permission.ACCESS_LOCATION_EXTRA_COMMANDS ]

Lcom/android/server/LocationManagerService.getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;)Landroid/location/Location;
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() = $gps$ AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x2 ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() =$passive$ AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x2 ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $network$ AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x2 ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $fused$ AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x2 ]

Lcom/android/server/LocationManagerService.removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V
	 [ android.permission.ACCESS_COARSE_LOCATION ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION ]

Lcom/android/server/LocationManagerService.requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() = $gps$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() =$passive$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $network$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $fused$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]

Lcom/android/server/LocationManagerService.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
	 [ android.permission.ACCESS_COARSE_LOCATION ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION ]

Lcom/android/server/LocationManagerService.getProviderProperties(Ljava/lang/String;)Lcom/android/internal/location/ProviderProperties;
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() = $gps$ ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() =$passive$ ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $network$ ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $fused$ ]

Lcom/android/server/LocationManagerService.reportLocation(Landroid/location/Location;Z)V
	 [ android.permission.INSTALL_LOCATION_PROVIDER AND android.permission.ACCESS_COARSE_LOCATION ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.ACCESS_COARSE_LOCATION ]
	 OR
	 [ android.permission.INSTALL_LOCATION_PROVIDER AND android.permission.ACCESS_FINE_LOCATION ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.ACCESS_FINE_LOCATION ]

Lcom/android/server/LocationManagerService.requestGeofence(Landroid/location/LocationRequest;Landroid/location/Geofence;Landroid/app/PendingIntent;Ljava/lang/String;)V
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() = $gps$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]
	 OR
	 [ android.permission.ACCESS_FINE_LOCATION AND x1.getProvider() =$passive$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $network$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]
	 OR
	 [ android.permission.ACCESS_COARSE_LOCATION AND x1.getProvider() = $fused$ AND UserHandle.getUserId(Binder.getCallingUid()) = 0 AND mPackages.getPackagesForUid(Binder.getCallingUid())[] = x4 ]

Lcom/android/server/LocationManagerService.addGpsStatusListener(Landroid/location/IGpsStatusListener;Ljava/lang/String;)Z
	 [ android.permission.ACCESS_FINE_LOCATION ]

Lcom/android/server/LocationManagerService.addGpsMeasurementsListener(Landroid/location/IGpsMeasurementsListener;Ljava/lang/String;)Z
	 [ android.permission.ACCESS_FINE_LOCATION ]

Lcom/android/server/LocationManagerService.addGpsNavigationMessageListener(Landroid/location/IGpsNavigationMessageListener;Ljava/lang/String;)Z
	 [ android.permission.ACCESS_FINE_LOCATION ]

Lcom/android/server/LockSettingsService.setBoolean(Ljava/lang/String;ZI)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.getBoolean(Ljava/lang/String;ZI)Z
	 [ android.permission.READ_CONTACTS AND READ_CONTACTS_PROTECTED_SETTINGS[] = x1 ]
	 OR
	 [ android.permission.ACCESS_KEYGUARD_SECURE_STORAGE AND READ_PASSWORD_PROTECTED_SETTING[] = x1 ]

Lcom/android/server/LockSettingsService.requireStrongAuth(II)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.checkVoldPassword(I)Z
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.setLong(Ljava/lang/String;JI)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.checkPassword(Ljava/lang/String;I)Lcom/android/internal/widget/VerifyCredentialResponse;
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.verifyPattern(Ljava/lang/String;JI)Lcom/android/internal/widget/VerifyCredentialResponse;
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.checkPattern(Ljava/lang/String;I)Lcom/android/internal/widget/VerifyCredentialResponse;
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.setLockPattern(Ljava/lang/String;Ljava/lang/String;I)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.setString(Ljava/lang/String;Ljava/lang/String;I)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
	 [ android.permission.READ_CONTACTS AND READ_CONTACTS_PROTECTED_SETTINGS[] = x1 ]
	 OR
	 [ android.permission.ACCESS_KEYGUARD_SECURE_STORAGE AND READ_PASSWORD_PROTECTED_SETTING[] = x1 ]

Lcom/android/server/LockSettingsService.getLong(Ljava/lang/String;JI)J
	 [ android.permission.READ_CONTACTS AND READ_CONTACTS_PROTECTED_SETTINGS[] = x1 ]
	 OR
	 [ android.permission.ACCESS_KEYGUARD_SECURE_STORAGE AND READ_PASSWORD_PROTECTED_SETTING[] = x1 ]

Lcom/android/server/LockSettingsService.verifyPassword(Ljava/lang/String;JI)Lcom/android/internal/widget/VerifyCredentialResponse;
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/LockSettingsService.setLockPassword(Ljava/lang/String;Ljava/lang/String;I)V
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/MmsServiceBroker$BinderService.downloadMessage(ILjava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
	 [ android.permission.RECEIVE_MMS ]

Lcom/android/server/MmsServiceBroker$BinderService.sendMessage(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
	 [ android.permission.SEND_SMS ]

Lcom/android/server/MountService.unmount(Ljava/lang/String;)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.getSecureContainerFilesystemPath(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.ASEC_ACCESS ]

Lcom/android/server/MountService.mountVolume(Ljava/lang/String;)I
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.changeEncryptionPassword(ILjava/lang/String;)I
	 [   android.permission.CRYPT_KEEPER ]

Lcom/android/server/MountService.partitionPrivate(Ljava/lang/String;)V
	 [   android.permission.MOUNT_FORMAT_FILESYSTEMS AND UserManager.getUserInfo(UserHandle.getCallingUserId()).isAdmin() ]

Lcom/android/server/MountService.mount(Ljava/lang/String;)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.getPrimaryStorageUuid()Ljava/lang/String;
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.setPrimaryStorageUuid(Ljava/lang/String;Landroid/content/pm/IPackageMoveObserver;)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.getPassword()Ljava/lang/String;
	 [   android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/MountService.encryptStorage(ILjava/lang/String;)I
	 [   android.permission.CRYPT_KEEPER ]

Lcom/android/server/MountService.shutdown(Landroid/os/storage/IMountShutdownObserver;)V
	 [   android.permission.SHUTDOWN ]

Lcom/android/server/MountService.fixPermissionsSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
	 [   android.permission.ASEC_CREATE ]

Lcom/android/server/MountService.createSecureContainer(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;IZ)I
	 [   android.permission.ASEC_CREATE ]

Lcom/android/server/MountService.destroySecureContainer(Ljava/lang/String;Z)I
	 [   android.permission.ASEC_DESTROY ]

Lcom/android/server/MountService.runMaintenance()V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.renameSecureContainer(Ljava/lang/String;Ljava/lang/String;)I
	 [   android.permission.ASEC_RENAME ]

Lcom/android/server/MountService.benchmark(Ljava/lang/String;)J
	 [   android.permission.MOUNT_FORMAT_FILESYSTEMS ]

Lcom/android/server/MountService.setDebugFlags(II)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.formatVolume(Ljava/lang/String;)I
	 [   android.permission.MOUNT_FORMAT_FILESYSTEMS ]

Lcom/android/server/MountService.mountSecureContainer(Ljava/lang/String;Ljava/lang/String;IZ)I
	 [   android.permission.ASEC_MOUNT_UNMOUNT ]

Lcom/android/server/MountService.partitionMixed(Ljava/lang/String;I)V
	 [   android.permission.MOUNT_FORMAT_FILESYSTEMS AND UserManager.getUserInfo(UserHandle.getCallingUserId()).isAdmin() ]

Lcom/android/server/MountService.resizeSecureContainer(Ljava/lang/String;ILjava/lang/String;)I
	 [   android.permission.ASEC_CREATE ]

Lcom/android/server/MountService.getSecureContainerList()[Ljava/lang/String;
	 [   android.permission.ASEC_ACCESS ]

Lcom/android/server/MountService.setVolumeNickname(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.verifyEncryptionPassword(Ljava/lang/String;)I
	 [ Binder.getCallingUid() = 1000 AND   android.permission.CRYPT_KEEPER ]

Lcom/android/server/MountService.decryptStorage(Ljava/lang/String;)I
	 [   android.permission.CRYPT_KEEPER ]

Lcom/android/server/MountService.unmountVolume(Ljava/lang/String;ZZ)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.unmountSecureContainer(Ljava/lang/String;Z)I
	 [   android.permission.ASEC_MOUNT_UNMOUNT ]

Lcom/android/server/MountService.finalizeSecureContainer(Ljava/lang/String;)I
	 [   android.permission.ASEC_CREATE ]

Lcom/android/server/MountService.forgetVolume(Ljava/lang/String;)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.getStorageUsers(Ljava/lang/String;)[I
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.format(Ljava/lang/String;)V
	 [   android.permission.MOUNT_FORMAT_FILESYSTEMS ]

Lcom/android/server/MountService.partitionPublic(Ljava/lang/String;)V
	 [   android.permission.MOUNT_FORMAT_FILESYSTEMS ]

Lcom/android/server/MountService.setVolumeUserFlags(Ljava/lang/String;II)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.getEncryptionState()I
	 [   android.permission.CRYPT_KEEPER ]

Lcom/android/server/MountService.getSecureContainerPath(Ljava/lang/String;)Ljava/lang/String;
	 [   android.permission.ASEC_ACCESS ]

Lcom/android/server/MountService.forgetAllVolumes()V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/MountService.isSecureContainerMounted(Ljava/lang/String;)Z
	 [   android.permission.ASEC_ACCESS ]

Lcom/android/server/NetworkManagementService.setAccessPoint(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.listTtys()[Ljava/lang/String;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.addInterfaceToLocalNetwork(Ljava/lang/String;Ljava/util/List;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.addLegacyRouteForNetId(ILandroid/net/RouteInfo;I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setInterfaceAlert(Ljava/lang/String;J)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.isFirewallEnabled()Z
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.setDnsForwarders(Landroid/net/Network;[Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.enableNat(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.getDnsForwarders()[Ljava/lang/String;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.clearPermission([I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.enableIpv6(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.getIpForwardingEnabled()Z
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.getNetworkStatsDetail()Landroid/net/NetworkStats;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.startAccessPoint(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.stopAccessPoint(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.listInterfaces()[Ljava/lang/String;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.startClatd(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.clearInterfaceAddresses(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setFirewallEgressSourceRule(Ljava/lang/String;Z)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.setInterfaceIpv6PrivacyExtensions(Ljava/lang/String;Z)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setFirewallInterfaceRule(Ljava/lang/String;Z)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.createPhysicalNetwork(ILjava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setUidCleartextNetworkPolicy(II)V
	 [ Binder.getCallingUid() = x1 ]
	 OR
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setInterfaceDown(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setDefaultNetId(I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setDnsServersForNetwork(I[Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setFirewallChainEnabled(IZ)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.getNetworkStatsUidDetail(I)Landroid/net/NetworkStats;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setFirewallEgressDestRule(Ljava/lang/String;IZ)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.isBandwidthControlEnabled()Z
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeVpnUidRanges(I[Landroid/net/UidRange;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setInterfaceConfig(Ljava/lang/String;Landroid/net/InterfaceConfiguration;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setIpForwardingEnabled(Z)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.untetherInterface(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeIdleTimer(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setFirewallUidRule(III)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.getInterfaceConfig(Ljava/lang/String;)Landroid/net/InterfaceConfiguration;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.addRoute(ILandroid/net/RouteInfo;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.disableNat(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.getNetworkStatsTethering()Landroid/net/NetworkStats;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeNetwork(I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.stopInterfaceForwarding(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.tetherInterface(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.addIdleTimer(Ljava/lang/String;II)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.unregisterObserver(Landroid/net/INetworkManagementEventObserver;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setNetworkPermission(ILjava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.attachPppd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setMtu(Ljava/lang/String;I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.getNetworkStatsSummaryXt()Landroid/net/NetworkStats;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.stopClatd(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.addVpnUidRanges(I[Landroid/net/UidRange;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setInterfaceIpv6NdOffload(Ljava/lang/String;Z)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.shutdown()V
	 [   android.permission.SHUTDOWN ]

Lcom/android/server/NetworkManagementService.isClatdStarted(Ljava/lang/String;)Z
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeInterfaceAlert(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setInterfaceQuota(Ljava/lang/String;J)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.registerObserver(Landroid/net/INetworkManagementEventObserver;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.createVirtualNetwork(IZZ)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setFirewallUidRules(I[I[I)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.getNetworkStatsSummaryDev()Landroid/net/NetworkStats;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeRoute(ILandroid/net/RouteInfo;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.startTethering([Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeInterfaceQuota(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeInterfaceFromNetwork(Ljava/lang/String;I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.addInterfaceToNetwork(Ljava/lang/String;I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.allowProtect(I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setInterfaceUp(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.stopTethering()V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.listTetheredInterfaces()[Ljava/lang/String;
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.detachPppd(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.clearDefaultNetId()V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setGlobalAlert(J)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.removeInterfaceFromLocalNetwork(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.startInterfaceForwarding(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setFirewallEnabled(Z)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/NetworkManagementService.wifiFirmwareReload(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.disableIpv6(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.isTetheringStarted()Z
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setPermission(Ljava/lang/String;[I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.denyProtect(I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.setUidNetworkRules(IZ)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkManagementService.flushNetworkDnsCache(I)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NetworkScoreService.clearScores()Z
	 [ android.permission.SCORE_NETWORKS ]
	 OR
	 [ android.permission.BROADCAST_NETWORK_PRIVILEGED; ]

Lcom/android/server/NetworkScoreService.registerNetworkScoreCache(ILandroid/net/INetworkScoreCache;)V
	 [   android.permission.BROADCAST_NETWORK_PRIVILEGED ]

Lcom/android/server/NetworkScoreService.setActiveScorer(Ljava/lang/String;)Z
	 [   android.permission.SCORE_NETWORKS ]

Lcom/android/server/NetworkScoreService.disableScoring()V
	 [ android.permission.SCORE_NETWORKS ]
	 OR
	 [ android.permission.BROADCAST_NETWORK_PRIVILEGED; ]

Lcom/android/server/NetworkScoreService.updateScores([Landroid/net/ScoredNetwork;)Z
	 [ android.permission.SCORE_NETWORKS ]

Lcom/android/server/NsdService.setEnabled(Z)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/NsdService.getMessenger()Landroid/os/Messenger;
	 [   android.permission.INTERNET ]

Lcom/android/server/PersistentDataBlockService$1.read()[B
	 [ Binder.getCallingUid() = mAllowedUid ]

Lcom/android/server/PersistentDataBlockService$1.getOemUnlockEnabled()Z
	 [ android.permission.OEM_UNLOCK_STATE ]

Lcom/android/server/PersistentDataBlockService$1.getDataBlockSize()I
	 [ android.permission.ACCESS_PDB_STATE ]

Lcom/android/server/PersistentDataBlockService$1.write([B)I
	 [ Binder.getCallingUid() = mAllowedUid ]

Lcom/android/server/PersistentDataBlockService$1.setOemUnlockEnabled(Z)V
	 [ android.permission.OEM_UNLOCK_STATE AND Binder.getCallingUserHandle().isOwner() ]

Lcom/android/server/PersistentDataBlockService$1.wipe()V
	 [ android.permission.OEM_UNLOCK_STATE ]

Lcom/android/server/SerialService.openSerialPort(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
	 [   android.permission.SERIAL_PORT ]

Lcom/android/server/SerialService.getSerialPorts()[Ljava/lang/String;
	 [   android.permission.SERIAL_PORT ]

Lcom/android/server/TelephonyRegistry.notifyCallForwardingChanged(Z)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDisconnectCause(II)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyCallForwardingChangedForSubscriber(IZ)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyCellInfoForSubscriber(ILjava/util/List;)V
	 [   android.permission.MODIFY_PHONE_STATE AND ActivityManager.getCurrentUser() = mRecords[].CallerUserId ]

Lcom/android/server/TelephonyRegistry.notifyCarrierNetworkChange(Z)V
	 [   android.permission.MODIFY_PHONE_STATE ]
	 OR
	 [ Telephony.checkCarrierPrivilegesForPackage(PackageManager.getPackagesForUid(Binder.getCallingUid())[]) = 1 ]

Lcom/android/server/TelephonyRegistry.notifyServiceStateForPhoneId(IILandroid/telephony/ServiceState;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDataActivity(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDataActivityForSubscriber(II)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyMessageWaitingChangedForPhoneId(IIZ)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
	 [ x3 & 0x10 != 0 AND android.permission.COARSE_LOCATION ]
	 OR
	 [ x3 & 0x400 != 0 AND android.permission.COARSE_LOCATION ]
	 OR
	 [ x3 & 0x400c AND   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ x3 & 0x1800 AND   android.permission.READ_PRECISE_PHONE_STATE ]
	 OR
	 [ x3 & 0x8000 AND   android.permission.READ_PRECISE_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyCellLocation(Landroid/os/Bundle;)V
	 [   android.permission.MODIFY_PHONE_STATE AND ActivityManager.getCurrentUser() = mRecords[].CallerUserId ]

Lcom/android/server/TelephonyRegistry.notifyCellInfo(Ljava/util/List;)V
	 [   android.permission.MODIFY_PHONE_STATE AND ActivityManager.getCurrentUser() = mRecords[].CallerUserId ]

Lcom/android/server/TelephonyRegistry.notifyOemHookRawEventForSubscriber(I[B)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyPreciseCallState(III)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.listenForSubscriber(ILjava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
	 [ x4 & 0x10 != 0 AND android.permission.COARSE_LOCATION ]
	 OR
	 [ x4 & 0x400 != 0 AND android.permission.COARSE_LOCATION ]
	 OR
	 [ x4 & 0x400c AND   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ x4 & 0x1800 AND   android.permission.READ_PRECISE_PHONE_STATE ]
	 OR
	 [ x4 & 0x8000 AND   android.permission.READ_PRECISE_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyVoLteServiceStateChanged(Landroid/telephony/VoLteServiceState;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyCallState(ILjava/lang/String;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDataConnectionFailedForSubscriber(ILjava/lang/String;Ljava/lang/String;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyCellLocationForSubscriber(ILandroid/os/Bundle;)V
	 [   android.permission.MODIFY_PHONE_STATE AND ActivityManager.getCurrentUser() = mRecords[].CallerUserId ]

Lcom/android/server/TelephonyRegistry.notifyOtaspChanged(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDataConnection(IZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;IZ)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDataConnectionForSubscriber(IIZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;IZ)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyPreciseDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.addOnSubscriptionsChangedListener(Ljava/lang/String;Lcom/android/internal/telephony/IOnSubscriptionsChangedListener;)V
	 [   android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [   android.permission.READ_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifySignalStrengthForSubscriber(ILandroid/telephony/SignalStrength;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifySignalStrength(Landroid/telephony/SignalStrength;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TelephonyRegistry.notifyDataConnectionRealTimeInfo(Landroid/telephony/DataConnectionRealTimeInfo;)V
	 [   android.permission.MODIFY_PHONE_STATE AND ActivityManager.getCurrentUser() = mRecords[].CallerUserId ]

Lcom/android/server/TelephonyRegistry.notifyCallStateForSubscriber(IILjava/lang/String;)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/TextServicesManagerService.getSpellCheckerService(Ljava/lang/String;Ljava/lang/String;Lcom/android/internal/textservice/ITextServicesSessionListener;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;)V
	 [   android.permission.WRITE_SECURE_SETTINGS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.WRITE_SECURE_SETTINGS AND mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/TextServicesManagerService.setCurrentSpellCheckerSubtype(Ljava/lang/String;I)V
	 [   android.permission.WRITE_SECURE_SETTINGS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.WRITE_SECURE_SETTINGS AND mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/TextServicesManagerService.getCurrentSpellChecker(Ljava/lang/String;)Landroid/view/textservice/SpellCheckerInfo;
	 [   android.permission.WRITE_SECURE_SETTINGS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.WRITE_SECURE_SETTINGS AND mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/TextServicesManagerService.setSpellCheckerEnabled(Z)V
	 [   android.permission.WRITE_SECURE_SETTINGS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.WRITE_SECURE_SETTINGS AND mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/TextServicesManagerService.getEnabledSpellCheckers()[Landroid/view/textservice/SpellCheckerInfo;
	 [   android.permission.WRITE_SECURE_SETTINGS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.WRITE_SECURE_SETTINGS AND mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/TextServicesManagerService.finishSpellCheckerService(Lcom/android/internal/textservice/ISpellCheckerSessionListener;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/TextServicesManagerService.isSpellCheckerEnabled()Z
	 [   android.permission.WRITE_SECURE_SETTINGS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.WRITE_SECURE_SETTINGS AND mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/TextServicesManagerService.getCurrentSpellCheckerSubtype(Ljava/lang/String;Z)Landroid/view/textservice/SpellCheckerSubtype;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ mSettings.getCurrentUserId() = UserHandle.getUserId(Binder.getCallingUid()) ]

Lcom/android/server/UpdateLockService.acquireUpdateLock(Landroid/os/IBinder;Ljava/lang/String;)V
	 [   android.permission.UPDATE_LOCK ]

Lcom/android/server/UpdateLockService.releaseUpdateLock(Landroid/os/IBinder;)V
	 [   android.permission.UPDATE_LOCK ]

Lcom/android/server/VibratorService.vibrate(ILjava/lang/String;JILandroid/os/IBinder;)V
	 [ android.permission.VIBRATE AND Binder.getCallingUid() = x1 ]
	 OR
	 [ android.permission.VIBRATE AND Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.VIBRATE AND android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/VibratorService.cancelVibrate(Landroid/os/IBinder;)V
	 [   android.permission.VIBRATE ]

Lcom/android/server/VibratorService.vibratePattern(ILjava/lang/String;[JIILandroid/os/IBinder;)V
	 [ android.permission.VIBRATE AND Binder.getCallingUid() = x1 ]
	 OR
	 [ android.permission.VIBRATE AND Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [ android.permission.VIBRATE AND android.permission.UPDATE_APP_OPS_STATS ]

Lcom/android/server/accessibility/AccessibilityManagerService.addAccessibilityInteractionConnection(Landroid/view/IWindow;Landroid/view/accessibility/IAccessibilityInteractionConnection;I)I
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x3 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/accessibility/AccessibilityManagerService.addClient(Landroid/view/accessibility/IAccessibilityManagerClient;I)I
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/accessibility/AccessibilityManagerService.interrupt(I)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/accessibility/AccessibilityManagerService.sendAccessibilityEvent(Landroid/view/accessibility/AccessibilityEvent;I)Z
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/accessibility/AccessibilityManagerService.getInstalledAccessibilityServiceList(I)Ljava/util/List;
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/accessibility/AccessibilityManagerService.getEnabledAccessibilityServiceList(II)Ljava/util/List;
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/accessibility/AccessibilityManagerService.temporaryEnableAccessibilityStateUntilKeyguardRemoved(Landroid/content/ComponentName;Z)V
	 [ android.permission.TEMPORARY_ENABLE_ACCESSIBILITY ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/accessibility/AccessibilityManagerService.registerUiTestAutomationService(Landroid/os/IBinder;Landroid/accessibilityservice/IAccessibilityServiceClient;Landroid/accessibilityservice/AccessibilityServiceInfo;)V
	 [ android.permission.RETRIEVE_WINDOW_CONTENT ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/accessibility/AccessibilityManagerService.getWindowToken(I)Landroid/os/IBinder;
	 [ android.permission.RETRIEVE_WINDOW_TOKEN ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/accounts/AccountManagerService.confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V
	 [ UserHandle.getCallingUserId() = x5 ]
	 OR
	 [ Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/accounts/AccountManagerService.addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V
	 [ UserHandle.getCallingUserId() = x7 ]
	 OR
	 [ Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/accounts/AccountManagerService.removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V
	 [ UserHandle.getCallingUserId() = x4 ]
	 OR
	 [ Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [  android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/accounts/AccountManagerService.updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/accounts/AccountManagerService.copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V
	 [ Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/accounts/AccountManagerService.removeAccountExplicitly(Landroid/accounts/Account;)Z
	 [ !UserManager.getUserRestrictions($no_modify_accounts$) ]

Lcom/android/server/accounts/AccountManagerService.getAccounts(Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;
	 [ android.permission.GET_ACCOUNTS_PRIVILEGED ]

Lcom/android/server/accounts/AccountManagerService.getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;
	 [ UserHandle.isSameApp(Binder.getCallingUid(), Process.myUid()) ]

Lcom/android/server/accounts/AccountManagerService.addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V
	 [ !UserManager.getUserRestrictions($no_modify_accounts$) ]

Lcom/android/server/accounts/AccountManagerService.getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;
	 [ UserHandle.isSameApp(Binder.getCallingUid(), Process.myUid()) AND UserHandle.getCallingUserId() = x2 AND android.permission.GET_ACCOUNTS_PRIVILEGED ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), Process.myUid()) AND Binder.getCallingUid() = Process.myUid() AND android.permission.GET_ACCOUNTS_PRIVILEGED ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), Process.myUid()) AND  android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.GET_ACCOUNTS_PRIVILEGED ]

Lcom/android/server/accounts/AccountManagerService.getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;
	 [ UserHandle.isSameApp(Binder.getCallingUid(), Process.myUid()) AND android.permission.GET_ACCOUNTS_PRIVILEGED ]

Lcom/android/server/accounts/AccountManagerService.getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/accounts/AccountManagerService.getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;
	 [ UserHandle.getCallingUserId() = x1 ]
	 OR
	 [ Binder.getCallingUid() = Process.myUid() ]
	 OR
	 [  android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/accounts/AccountManagerService.accountAuthenticated(Landroid/accounts/Account;)Z
	 [ !UserManager.getUserRestrictions($no_modify_accounts$) ]

Lcom/android/server/accounts/AccountManagerService.getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V
	 [ PackageManager.getPackageInfo(Binder.getCallingUid()).applicationInfo.privateFlags ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/accounts/AccountManagerService.hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V
	 [ Manifest.permission.GET_ACCOUNTS ]

Lcom/android/server/am/ActivityManagerService.appNotRespondingViaProvider(Landroid/os/IBinder;)V
	 [   android.permission.REMOVE_TASKS ]

Lcom/android/server/am/ActivityManagerService.bindBackupAgent(Landroid/content/pm/ApplicationInfo;I)Z
	 [   android.permission.CONFIRM_FULL_BACKUP ]

Lcom/android/server/am/ActivityManagerService.bootAnimationComplete()V
	 [   android.permission.BROADCAST_STICKY ]

Lcom/android/server/am/ActivityManagerService.clearPendingBackup()V
	 [   android.permission.BACKUP ]

Lcom/android/server/am/ActivityManagerService.crashApplication(IILjava/lang/String;Ljava/lang/String;)V
	 [   android.permission.FORCE_STOP_PACKAGES ]

Lcom/android/server/am/ActivityManagerService.createStackOnDisplay(I)Landroid/app/IActivityContainer;
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.createVirtualActivityContainer(Landroid/os/IBinder;Landroid/app/IActivityContainerCallback;)Landroid/app/IActivityContainer;
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.deleteActivityContainer(Landroid/app/IActivityContainer;)V
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.dumpHeap(Ljava/lang/String;IZLjava/lang/String;Landroid/os/ParcelFileDescriptor;)Z
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.finishHeavyWeightApp()V
	 [   android.permission.FORCE_STOP_PACKAGES ]

Lcom/android/server/am/ActivityManagerService.forceStopPackage(Ljava/lang/String;I)V
	 [   android.permission.FORCE_STOP_PACKAGES ]

Lcom/android/server/am/ActivityManagerService.getAllStackInfos()Ljava/util/List;
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.getAssistContextExtras(I)Landroid/os/Bundle;
	 [   android.permission.GET_TOP_ACTIVITY_INFO ]

Lcom/android/server/am/ActivityManagerService.getContentProviderExternal(Ljava/lang/String;ILandroid/os/IBinder;)Landroid/app/IActivityManager$ContentProviderHolder;
	 [   android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY ]

Lcom/android/server/am/ActivityManagerService.getCurrentUser()Landroid/content/pm/UserInfo;
	 [   android.permission.INTERACT_ACROSS_USERS ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/am/ActivityManagerService.getPackageProcessState(Ljava/lang/String;Ljava/lang/String;)I
	 [   android.permission.PACKAGE_USAGE_STATS ]
	 OR
	 [   android.permission.PACKAGE_GET_PACKAGE_IMPORTANCE ]

Lcom/android/server/am/ActivityManagerService.getRecentTasks(III)Ljava/util/List;
	 [ android.permission.GET_DETAILED_TASKS AND android.permission.REAL_GET_TASKS ]
	 OR
	 [ android.permission.GET_DETAILED_TASKS AND android.permission.GET_TASKS AND PackageManager.isUidPrivileged(Binder.getCallingUid()) ]

Lcom/android/server/am/ActivityManagerService.getRunningAppProcesses()Ljava/util/List;
	 [ !UserHandle.isolated(Binder.getCallerUid()) AND   android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ !UserHandle.isolated(Binder.getCallerUid()) AND android.permission.REAL_GET_TASKS ]
	 OR
	 [ !UserHandle.isolated(Binder.getCallerUid()) AND android.permission.GET_TASKS AND PackageManager.isUidPrivileged(Binder.getCallingUid()) ]

Lcom/android/server/am/ActivityManagerService.getRunningExternalApplications()Ljava/util/List;
	 [ !UserHandle.isolated(Binder.getCallerUid()) AND   android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ !UserHandle.isolated(Binder.getCallerUid()) AND android.permission.REAL_GET_TASKS ]
	 OR
	 [ !UserHandle.isolated(Binder.getCallerUid()) AND android.permission.GET_TASKS AND PackageManager.isUidPrivileged(Binder.getCallingUid()) ]

Lcom/android/server/am/ActivityManagerService.getRunningUserIds()[I
	 [   android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/am/ActivityManagerService.getStackInfo(I)Landroid/app/ActivityManager$StackInfo;
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.getTaskThumbnail(I)Landroid/app/ActivityManager$TaskThumbnail;
	 [   android.permission.READ_FRAME_BUFFER ]

Lcom/android/server/am/ActivityManagerService.getTasks(II)Ljava/util/List;
	 [ android.permission.REAL_GET_TASKS ]
	 OR
	 [ android.permission.GET_TASKS AND PackageManager.isUidPrivileged(Binder.getCallingUid()) ]

Lcom/android/server/am/ActivityManagerService.hang(Landroid/os/IBinder;Z)V
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.inputDispatchingTimedOut(IZLjava/lang/String;)J
	 [   android.permission.FILTER_EVENTS ]

Lcom/android/server/am/ActivityManagerService.isInHomeStack(I)Z
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.isUserRunning(IZ)Z
	 [   android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/am/ActivityManagerService.killAllBackgroundProcesses()V
	 [   android.permission.KILL_BACKGROUND_PROCESSES ]

Lcom/android/server/am/ActivityManagerService.killBackgroundProcesses(Ljava/lang/String;I)V
	 [   android.permission.KILL_BACKGROUND_PROCESSES ]
	 OR
	 [   android.permission.RESTART_PACKAGES ]

Lcom/android/server/am/ActivityManagerService.killUid(IILjava/lang/String;)V
	 [   android.permission.KILL_UID ]

Lcom/android/server/am/ActivityManagerService.launchAssistIntent(Landroid/content/Intent;ILjava/lang/String;ILandroid/os/Bundle;)Z
	 [   android.permission.GET_TOP_ACTIVITY_INFO ]

Lcom/android/server/am/ActivityManagerService.moveTaskBackwards(I)V
	 [   android.permission.REORDER_TASKS AND android.permission.STOP_APP_SWITCHES ]

Lcom/android/server/am/ActivityManagerService.moveTaskToFront(IILandroid/os/Bundle;)V
	 [   android.permission.REORDER_TASKS AND android.permission.STOP_APP_SWITCHES ]

Lcom/android/server/am/ActivityManagerService.moveTaskToStack(IIZ)V
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.navigateUpTo(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/Intent;)Z
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.START_ANY_ACTIVITY ]

Lcom/android/server/am/ActivityManagerService.performIdleMaintenance()V
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.profileControl(Ljava/lang/String;IZLandroid/app/ProfilerInfo;I)Z
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.registerProcessObserver(Landroid/app/IProcessObserver;)V
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.registerUidObserver(Landroid/app/IUidObserver;)V
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.registerUserSwitchObserver(Landroid/app/IUserSwitchObserver;)V
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/am/ActivityManagerService.removeContentProviderExternal(Ljava/lang/String;Landroid/os/IBinder;)V
	 [   android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY ]

Lcom/android/server/am/ActivityManagerService.removeTask(I)Z
	 [   android.permission.REMOVE_TASKS ]

Lcom/android/server/am/ActivityManagerService.requestAssistContextExtras(ILcom/android/internal/os/IResultReceiver;Landroid/os/IBinder;)Z
	 [   android.permission.GET_TOP_ACTIVITY_INFO ]

Lcom/android/server/am/ActivityManagerService.requestBugReport()V
	 [   android.permission.DUMP ]

Lcom/android/server/am/ActivityManagerService.resizeStack(ILandroid/graphics/Rect;)V
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.resizeTask(ILandroid/graphics/Rect;)V
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.restart()V
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.resumeAppSwitches()V
	 [   android.permission.STOP_APP_SWITCHES ]

Lcom/android/server/am/ActivityManagerService.setActivityController(Landroid/app/IActivityController;)V
	 [   android.permission.SET_ACTIVITY_WATCHER ]

Lcom/android/server/am/ActivityManagerService.setAlwaysFinish(Z)V
	 [   android.permission.SET_ALWAYS_FINISH ]

Lcom/android/server/am/ActivityManagerService.setDebugApp(Ljava/lang/String;ZZ)V
	 [   android.permission.SET_DEBUG_APP ]

Lcom/android/server/am/ActivityManagerService.setDumpHeapDebugLimit(Ljava/lang/String;IJLjava/lang/String;)V
	 [   android.permission.SET_DEBUG_APP AND x1 != null ]
	 OR
	 [ mPidsSelfLocked[Binder.getCallingPid()].info.flags & 0x2!= 0 AND x1 = null ]

Lcom/android/server/am/ActivityManagerService.setFrontActivityScreenCompatMode(I)V
	 [   android.permission.SET_SCREEN_COMPATIBILITY ]

Lcom/android/server/am/ActivityManagerService.setLockScreenShown(Z)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/am/ActivityManagerService.setPackageAskScreenCompat(Ljava/lang/String;Z)V
	 [   android.permission.SET_SCREEN_COMPATIBILITY ]

Lcom/android/server/am/ActivityManagerService.setPackageScreenCompatMode(Ljava/lang/String;I)V
	 [   android.permission.SET_SCREEN_COMPATIBILITY ]

Lcom/android/server/am/ActivityManagerService.setProcessForeground(Landroid/os/IBinder;IZ)V
	 [   android.permission.SET_PROCESS_LIMIT ]

Lcom/android/server/am/ActivityManagerService.setProcessLimit(I)V
	 [ android.permission.SET_PROCESS_LIMIT ]

Lcom/android/server/am/ActivityManagerService.shutdown(ZZ)V
	 [   android.permission.SHUTDOWN ]

Lcom/android/server/am/ActivityManagerService.signalPersistentProcesses(I)V
	 [   android.permission.SIGNAL_PERSISTENT_PROCESSES ]

Lcom/android/server/am/ActivityManagerService.startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I
	 [ !UserHandle.isolated(Binder.getCallerUid()) ]

Lcom/android/server/am/ActivityManagerService.startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I
	 [ !UserHandle.isolated(Binder.getCallerUid()) ]

Lcom/android/server/am/ActivityManagerService.startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/IActivityManager$WaitResult;
	 [ !UserHandle.isolated(Binder.getCallerUid()) ]

Lcom/android/server/am/ActivityManagerService.startActivityAsCaller(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;ZI)I
	 [ !UserHandle.isolated(Binder.getCallerUid()) ]

Lcom/android/server/am/ActivityManagerService.startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
	 [ !UserHandle.isolated(Binder.getCallerUid()) ]

Lcom/android/server/am/ActivityManagerService.startActivityFromRecents(ILandroid/os/Bundle;)I
	 [   android.permission.START_TASKS_FROM_RECENTS AND !UserHandle.isolated(Binder.getCallerUid()) ]

Lcom/android/server/am/ActivityManagerService.startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I
	 [ !UserHandle.isolated(Binder.getCallerUid()) ]

Lcom/android/server/am/ActivityManagerService.startLockTaskModeOnCurrent()V
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.startUserInBackground(I)Z
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/am/ActivityManagerService.startVoiceActivity(Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
	 [   android.permission.BIND_VOICE_INTERACTION ]

Lcom/android/server/am/ActivityManagerService.stopAppSwitches()V
	 [   android.permission.STOP_APP_SWITCHES ]

Lcom/android/server/am/ActivityManagerService.stopLockTaskModeOnCurrent()V
	 [   android.permission.MANAGE_ACTIVITY_STACKS ]

Lcom/android/server/am/ActivityManagerService.stopUser(ILandroid/app/IStopUserCallback;)I
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction() ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() != 2000 ]

Lcom/android/server/am/ActivityManagerService.unbroadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;I)V
	 [   android.permission.BROADCAST_STICKY ]

Lcom/android/server/am/ActivityManagerService.unhandledBack()V
	 [   android.permission.FORCE_BACK ]

Lcom/android/server/am/ActivityManagerService.updateConfiguration(Landroid/content/res/Configuration;)V
	 [   android.permission.CHANGE_CONFIGURATION ]

Lcom/android/server/am/ActivityManagerService.updatePersistentConfiguration(Landroid/content/res/Configuration;)V
	 [   android.permission.CHANGE_CONFIGURATION AND Binder.getCallingUid() = 0 ]
	 OR
	 [   android.permission.CHANGE_CONFIGURATION AND android.permission.WRITE_SETTINGS ]

Lcom/android/server/am/BatteryStatsService.noteStopWakelock(IILjava/lang/String;Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStartVideo(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteFlashlightOn(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.getStatistics()[B
	 [   android.permission.BATTERY_STATS ]

Lcom/android/server/am/BatteryStatsService.noteFullWifiLockAcquiredFromSource(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteFullWifiLockAcquired(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteConnectivityChanged(ILjava/lang/String;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteResetAudio()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteJobStart(Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiMulticastEnabledFromSource(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStopCamera(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStopSensor(II)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiRunningChanged(Landroid/os/WorkSource;Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiBatchedScanStartedFromSource(Landroid/os/WorkSource;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStartSensor(II)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteSyncStart(Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.notePhoneDataConnectionState(IZ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteScreenBrightness(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiScanStarted(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteEvent(ILjava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteUserActivity(II)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStopAudio(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteFullWifiLockReleasedFromSource(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteJobFinish(Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiOn()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiStopped(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteResetCamera()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiScanStartedFromSource(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.getStatisticsStream()Landroid/os/ParcelFileDescriptor;
	 [   android.permission.BATTERY_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiMulticastDisabled(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiOff()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteFlashlightOff(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStartGps(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiMulticastEnabled(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteFullWifiLockReleased(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStartWakelock(IILjava/lang/String;Ljava/lang/String;IZ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStartCamera(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiScanStopped(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStopVideo(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiRadioPowerState(IJ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.getAwakeTimeBattery()J
	 [   android.permission.BATTERY_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiState(ILjava/lang/String;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.notePhoneState(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiScanStoppedFromSource(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteInteractive(Z)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiSupplicantStateChanged(IZ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteNetworkStatsEnabled()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStopWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiRssiChanged(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiRunning(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStartWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;IZ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.getAwakeTimePlugged()J
	 [   android.permission.BATTERY_STATS ]

Lcom/android/server/am/BatteryStatsService.notePhoneOff()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.notePhoneSignalStrength(Landroid/telephony/SignalStrength;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteResetVideo()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteResetFlashlight()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteNetworkInterfaceType(Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStartAudio(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiBatchedScanStoppedFromSource(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteVibratorOn(IJ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWakeUp(Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteSyncFinish(Ljava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.notePhoneOn()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteStopGps(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteScreenState(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteWifiMulticastDisabledFromSource(Landroid/os/WorkSource;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteChangeWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;ILandroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;IZ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteVibratorOff(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.setBatteryState(IIIIII)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteMobileRadioPowerState(IJ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/BatteryStatsService.noteDeviceIdleMode(ZLjava/lang/String;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/am/ProcessStatsService.getCurrentStats(Ljava/util/List;)[B
	 [   android.permission.PACKAGE_USAGE_STATS ]

Lcom/android/server/am/ProcessStatsService.getStatsOverTime(J)Landroid/os/ParcelFileDescriptor;
	 [   android.permission.PACKAGE_USAGE_STATS ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.deleteHost(Ljava/lang/String;I)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.getAppWidgetIdsForHost(Ljava/lang/String;I)[I
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.bindAppWidgetId(Ljava/lang/String;IILandroid/content/ComponentName;Landroid/os/Bundle;)Z
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) AND UserHandle.getCallingUserId() = x3 AND android.permission.BIND_APPWIDGET ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.getAppWidgetOptions(Ljava/lang/String;I)Landroid/os/Bundle;
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.hasBindAppWidgetPermission(Ljava/lang/String;I)Z
	 [ android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.createAppWidgetConfigIntentSender(Ljava/lang/String;II)Landroid/content/IntentSender;
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.deleteAppWidgetId(Ljava/lang/String;I)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.getAppWidgetInfo(Ljava/lang/String;I)Landroid/appwidget/AppWidgetProviderInfo;
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.partiallyUpdateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.isBoundWidgetPackage(Ljava/lang/String;I)Z
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.updateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.setBindAppWidgetPermission(Ljava/lang/String;IZ)V
	 [ android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.notifyAppWidgetViewDataChanged(Ljava/lang/String;[II)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.unbindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.getAppWidgetIds(Landroid/content/ComponentName;)[I
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1.getPackageName()) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.getInstalledProvidersForProfile(II)Landroid/content/pm/ParceledListSlice;
	 [ UserHandle.getCallingUserId() = x2 ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.updateAppWidgetProvider(Landroid/content/ComponentName;Landroid/widget/RemoteViews;)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1.getPackageName()) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.allocateAppWidgetId(Ljava/lang/String;I)I
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.deleteAllHosts()V
	 [ Binder.getCallingUid() = mHosts[].id.uid ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.bindRemoteViewsService(Ljava/lang/String;ILandroid/content/Intent;Landroid/os/IBinder;)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.updateAppWidgetOptions(Ljava/lang/String;ILandroid/os/Bundle;)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.stopListening(Ljava/lang/String;I)V
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.getAppWidgetViews(Ljava/lang/String;I)Landroid/widget/RemoteViews;
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x1) ]

Lcom/android/server/appwidget/AppWidgetServiceImpl.startListening(Lcom/android/internal/appwidget/IAppWidgetHost;Ljava/lang/String;ILjava/util/List;)[I
	 [ AppOpps.checkPackage(Binder.getCallingUid(), x2) ]

Lcom/android/server/audio/AudioService.setMicrophoneMute(ZLjava/lang/String;I)V
	 [ UserHandle.getCallingUserId() = x3 AND android.permission.MODIFY_AUDIO_SETTINGS ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.MODIFY_AUDIO_SETTINGS ]

Lcom/android/server/audio/AudioService.reloadAudioSettings()V
	 [ Binder.getCallingUid() = mControllerService.mUid ]
	 OR
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/audio/AudioService.setVolumePolicy(Landroid/media/VolumePolicy;)V
	 [ Binder.getCallingUid() = mControllerService.mUid ]
	 OR
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/audio/AudioService.stopBluetoothSco(Landroid/os/IBinder;)V
	 [   android.permission.MODIFY_AUDIO_SETTINGS ]

Lcom/android/server/audio/AudioService.setSpeakerphoneOn(Z)V
	 [   android.permission.MODIFY_AUDIO_SETTINGS ]

Lcom/android/server/audio/AudioService.forceRemoteSubmixFullVolume(ZLandroid/os/IBinder;)V
	 [   android.permission.CAPTURE_AUDIO_OUTPUT ]

Lcom/android/server/audio/AudioService.setBluetoothScoOn(Z)V
	 [   android.permission.MODIFY_AUDIO_SETTINGS ]

Lcom/android/server/audio/AudioService.setMasterMute(ZILjava/lang/String;I)V
	 [ UserHandle.getCallingUserId() = x4 ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/audio/AudioService.startBluetoothSco(Landroid/os/IBinder;I)V
	 [   android.permission.MODIFY_AUDIO_SETTINGS ]

Lcom/android/server/audio/AudioService.disableSafeMediaVolume(Ljava/lang/String;)V
	 [ Binder.getCallingUid() = mControllerService.mUid ]
	 OR
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/audio/AudioService.setVolumeController(Landroid/media/IVolumeController;)V
	 [ Binder.getCallingUid() = mControllerService.mUid ]
	 OR
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/audio/AudioService.setMode(ILandroid/os/IBinder;Ljava/lang/String;)V
	 [ android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_PHONE_STATE AND x1 = AudioSystem.MODE_IN_CALL ]
	 OR
	 [ android.permission.MODIFY_AUDIO_SETTINGS AND x1 != AudioSystem.MODE_IN_CALL ]

Lcom/android/server/audio/AudioService.setRingtonePlayer(Landroid/media/IRingtonePlayer;)V
	 [   android.permission.REMOTE_AUDIO_PLAYBACK ]

Lcom/android/server/audio/AudioService.startBluetoothScoVirtualCall(Landroid/os/IBinder;)V
	 [   android.permission.MODIFY_AUDIO_SETTINGS ]

Lcom/android/server/audio/AudioService.requestAudioFocus(Landroid/media/AudioAttributes;ILandroid/os/IBinder;Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Ljava/lang/String;ILandroid/media/audiopolicy/IAudioPolicyCallback;)I
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/audio/AudioService.setFocusPropertiesForPolicy(ILandroid/media/audiopolicy/IAudioPolicyCallback;)I
	 [   android.permission.MODIFY_AUDIO_ROUTING ]

Lcom/android/server/audio/AudioService.notifyVolumeControllerVisible(Landroid/media/IVolumeController;Z)V
	 [ Binder.getCallingUid() = mControllerService.mUid ]
	 OR
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/audio/AudioService.registerAudioPolicy(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;Z)Ljava/lang/String;
	 [   android.permission.MODIFY_AUDIO_ROUTING ]

Lcom/android/server/audio/AudioService.setRingerModeInternal(ILjava/lang/String;)V
	 [ Binder.getCallingUid() = mControllerService.mUid ]
	 OR
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/audio/AudioService.registerRemoteController(Landroid/media/IRemoteControlDisplay;IILandroid/content/ComponentName;)Z
	 [   android.permission.MEDIA_CONTENT_CONTROL ]

Lcom/android/server/audio/AudioService.registerRemoteControlDisplay(Landroid/media/IRemoteControlDisplay;II)Z
	 [   android.permission.MEDIA_CONTENT_CONTROL ]

Lcom/android/server/audio/AudioService.setRemoteStreamVolume(I)V
	 [ Binder.getCallingUid() = mControllerService.mUid ]
	 OR
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/backup/Trampoline.selectBackupTransport(Ljava/lang/String;)Ljava/lang/String;
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.fullRestore(Landroid/os/ParcelFileDescriptor;)V
	 [ android.permission.BACKUP AND UserHandle.getCallingUserId() = 0 ]

Lcom/android/server/backup/Trampoline.isBackupEnabled()Z
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.clearBackupData(Ljava/lang/String;Ljava/lang/String;)V
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.hasBackupPassword()Z
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.setBackupEnabled(Z)V
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.getCurrentTransport()Ljava/lang/String;
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.setAutoRestore(Z)V
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.getDataManagementIntent(Ljava/lang/String;)Landroid/content/Intent;
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.setBackupServiceActive(IZ)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]

Lcom/android/server/backup/Trampoline.fullTransportBackup([Ljava/lang/String;)V
	 [ android.permission.BACKUP AND UserHandle.getCallingUserId() = 0 ]

Lcom/android/server/backup/Trampoline.beginRestoreSession(Ljava/lang/String;Ljava/lang/String;)Landroid/app/backup/IRestoreSession;
	 [ Binder.getCallingUid() = PackageManager.getPackageInfo(x1).applicationInfo.uid ]
	 OR
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.fullBackup(Landroid/os/ParcelFileDescriptor;ZZZZZZZ[Ljava/lang/String;)V
	 [ android.permission.BACKUP AND UserHandle.getCallingUserId() = 0 ]

Lcom/android/server/backup/Trampoline.getConfigurationIntent(Ljava/lang/String;)Landroid/content/Intent;
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.backupNow()V
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.getAvailableRestoreToken(Ljava/lang/String;)J
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.acknowledgeFullBackupOrRestore(IZLjava/lang/String;Ljava/lang/String;Landroid/app/backup/IFullBackupRestoreObserver;)V
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.agentConnected(Ljava/lang/String;Landroid/os/IBinder;)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/backup/Trampoline.restoreAtInstall(Ljava/lang/String;I)V
	 [ Binder.getCallingUid() = 1000 AND android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.setBackupPassword(Ljava/lang/String;Ljava/lang/String;)Z
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.agentDisconnected(Ljava/lang/String;)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/backup/Trampoline.getDataManagementLabel(Ljava/lang/String;)Ljava/lang/String;
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.dataChanged(Ljava/lang/String;)V
	 [ UserHandle.getCallingUserId() = 0 AND android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.listAllTransports()[Ljava/lang/String;
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.getDestinationString(Ljava/lang/String;)Ljava/lang/String;
	 [ android.permission.BACKUP ]

Lcom/android/server/backup/Trampoline.setBackupProvisioned(Z)V
	 [ android.permission.BACKUP ]

Lcom/android/server/clipboard/ClipboardService.setPrimaryClip(Landroid/content/ClipData;Ljava/lang/String;)V
	 [ !UserManager.getUserRestrictions($no_cross_profile_copy_paste$) ]

Lcom/android/server/clipboard/ClipboardService.getPrimaryClip(Ljava/lang/String;)Landroid/content/ClipData;
	 [ UserHandle.isSameApp(PackageManager.getPackageInfo(x1).applicationInfo.uid, Binder.getCallingUid()) ]

Lcom/android/server/connectivity/Tethering.interfaceAdded(Ljava/lang/String;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/connectivity/Tethering.interfaceLinkStateChanged(Ljava/lang/String;Z)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/connectivity/Tethering.interfaceStatusChanged(Ljava/lang/String;Z)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/content/ContentService.getSyncStatusAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)Landroid/content/SyncStatusInfo;
	 [ UserHandle.getCallingUserId() = x4 AND android.permission.READ_SYNC_STATS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.getSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;I)Z
	 [ UserHandle.getCallingUserId() = x3 AND android.permission.READ_SYNC_STATS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.getSyncStatus(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Landroid/content/SyncStatusInfo;
	 [ android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
	 [   android.permission.WRITE_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.setSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;ZI)V
	 [ UserHandle.getCallingUserId() = x4 AND android.permission.WRITE_SYNC_SETTINGS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.WRITE_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.getSyncAdapterPackagesForAuthorityAsUser(Ljava/lang/String;I)[Ljava/lang/String;
	 [ UserHandle.getCallingUserId() = x2 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/content/ContentService.getCurrentSyncsAsUser(I)Ljava/util/List;
	 [ UserHandle.getCallingUserId() = x1 AND android.permission.READ_SYNC_STATS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.setMasterSyncAutomatically(Z)V
	 [ android.permission.WRITE_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Z
	 [   android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.getCurrentSyncs()Ljava/util/List;
	 [ android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.getMasterSyncAutomatically()Z
	 [ android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.setMasterSyncAutomaticallyAsUser(ZI)V
	 [ UserHandle.getCallingUserId() = x2 AND android.permission.WRITE_SYNC_SETTINGS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.WRITE_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.syncAsUser(Landroid/content/SyncRequest;I)V
	 [ UserHandle.getCallingUserId() = x2 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/content/ContentService.getSyncAdapterTypesAsUser(I)[Landroid/content/SyncAdapterType;
	 [ UserHandle.getCallingUserId() = x1 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/content/ContentService.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
	 [ android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
	 [   android.permission.WRITE_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.registerContentObserver(Landroid/net/Uri;ZLandroid/database/IContentObserver;I)V
	 [ checkUriPermission(x1, Binder.getCallingPid(), Binder.getCallingUid()) ]
	 OR
	 [ UserHandle.getCallingUserId() = x4 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/content/ContentService.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
	 [   android.permission.WRITE_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.cancelSyncAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)V
	 [ UserHandle.getCallingUserId() = x4 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/content/ContentService.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Z
	 [ android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V
	 [ android.permission.WRITE_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Ljava/util/List;
	 [   android.permission.READ_SYNC_SETTINGS ]

Lcom/android/server/content/ContentService.getIsSyncableAsUser(Landroid/accounts/Account;Ljava/lang/String;I)I
	 [ UserHandle.getCallingUserId() = x3 AND android.permission.READ_SYNC_STATS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.getMasterSyncAutomaticallyAsUser(I)Z
	 [ UserHandle.getCallingUserId() = x3 AND android.permission.READ_SYNC_STATS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.isSyncPendingAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)Z
	 [ UserHandle.getCallingUserId() = x4 AND android.permission.READ_SYNC_STATS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
	 [ android.permission.READ_SYNC_STATS ]

Lcom/android/server/content/ContentService.notifyChange(Landroid/net/Uri;Landroid/database/IContentObserver;ZZI)V
	 [ UserHandle.getCallingUserId() = x5 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getDeviceOwnerName()Ljava/lang/String;
	 [   android.permission.MANAGE_USERS ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setKeyguardDisabled(Landroid/content/ComponentName;Z)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String;
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getStorageEncryption(Landroid/content/ComponentName;I)Z
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getCrossProfileCallerIdDisabledForUser(I)Z
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getCrossProfileCallerIdDisabled(Landroid/content/ComponentName;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPermissionPolicy(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getDoNotAskCredentialsOnBoot()Z
	 [ android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setProfileEnabled(Landroid/content/ComponentName;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.packageHasActiveAdmins(Ljava/lang/String;I)Z
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.enableSystemApp(Landroid/content/ComponentName;Ljava/lang/String;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.clearPackagePersistentPreferredActivities(Landroid/content/ComponentName;Ljava/lang/String;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setScreenCaptureDisabled(Landroid/content/ComponentName;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setUserRestriction(Landroid/content/ComponentName;Ljava/lang/String;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 AND !IMMUTABLE_USER_RESTRICTIONS.contains(x2) ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getProfileOwnerName(I)Ljava/lang/String;
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getRestrictionsProvider(I)Landroid/content/ComponentName;
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setAutoTimeRequired(Landroid/content/ComponentName;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setBluetoothContactSharingDisabled(Landroid/content/ComponentName;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.hasGrantedPolicy(Landroid/content/ComponentName;II)Z
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x3 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getCameraDisabled(Landroid/content/ComponentName;I)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setSystemUpdatePolicy(Landroid/content/ComponentName;Landroid/app/admin/SystemUpdatePolicy;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setProfileOwner(Landroid/content/ComponentName;Ljava/lang/String;I)Z
	 [ android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setCertInstallerPackage(Landroid/content/ComponentName;Ljava/lang/String;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getApplicationRestrictions(Landroid/content/ComponentName;Ljava/lang/String;)Landroid/os/Bundle;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPermittedInputMethods(Landroid/content/ComponentName;)Ljava/util/List;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setUninstallBlocked(Landroid/content/ComponentName;Ljava/lang/String;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.isAdminActive(Landroid/content/ComponentName;I)Z
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setCrossProfileCallerIdDisabled(Landroid/content/ComponentName;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.clearDeviceOwner(Ljava/lang/String;)V
	 [ PackageManager.getPackageUid(x1) = Binder.getCallingUid() ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setSecureSetting(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPermissionGrantState(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;I)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.reportSuccessfulPasswordAttempt(I)V
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 AND android.permission.BIND_DEVICE_ADMIN ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.BIND_DEVICE_ADMIN ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.BIND_DEVICE_ADMIN ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.BIND_DEVICE_ADMIN ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.reportFailedPasswordAttempt(I)V
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x1).isManagedProfile() ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x1).isManagedProfile() ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x1).isManagedProfile() ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x1).isManagedProfile() ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setUserIcon(Landroid/content/ComponentName;Landroid/graphics/Bitmap;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.removeCrossProfileWidgetProvider(Landroid/content/ComponentName;Ljava/lang/String;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getRemoveWarning(Landroid/content/ComponentName;Landroid/os/RemoteCallback;I)V
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x3 AND android.permission.BIND_DEVICE_ADMIN ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.BIND_DEVICE_ADMIN ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.BIND_DEVICE_ADMIN ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.BIND_DEVICE_ADMIN ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setAccountManagementDisabled(Landroid/content/ComponentName;Ljava/lang/String;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.uninstallCaCerts(Landroid/content/ComponentName;[Ljava/lang/String;)V
	 [ x1 = null AND mPackageManager(mUserData.get(UserHandle.getCallingUid()).mDelegatedCertInstallerPackage).uid = Binder.getCallingUid() ]
	 OR
	 [ x1 = null AND android.permission.MANAGE_CA_CERTIFICATES ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setGlobalProxy(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)Landroid/content/ComponentName;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.removeActiveAdmin(Landroid/content/ComponentName;I)V
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingUid() = 0 AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 AND android.permission.MANAGE_DEVICE_ADMINS ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.MANAGE_DEVICE_ADMINS ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.MANAGE_DEVICE_ADMINS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.MANAGE_DEVICE_ADMINS ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.notifyLockTaskModeChanged(ZLjava/lang/String;I)V
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setActivePasswordState(IIIIIIIII)V
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x9 AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x9).isManagedProfile() ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x9).isManagedProfile() ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x9).isManagedProfile() ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.BIND_DEVICE_ADMIN AND !UserManager.getUserInfo(x9).isManagedProfile() ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setApplicationHidden(Landroid/content/ComponentName;Ljava/lang/String;Z)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setStatusBarDisabled(Landroid/content/ComponentName;Z)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setCameraDisabled(Landroid/content/ComponentName;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.removeUser(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getCertInstallerPackage(Landroid/content/ComponentName;)Ljava/lang/String;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.choosePrivateKeyAlias(ILandroid/net/Uri;Ljava/lang/String;Landroid/os/IBinder;)V
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 AND Binder.getCallingUserHandle().isOwner() ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPermissionGrantState(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)I
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getLockTaskPackages(Landroid/content/ComponentName;)[Ljava/lang/String;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.clearProfileOwner(Landroid/content/ComponentName;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.notifyPendingSystemUpdate(J)V
	 [ android.permission.NOTIFY_PENDING_SYSTEM_UPDATE AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setProfileName(Landroid/content/ComponentName;Ljava/lang/String;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.clearCrossProfileIntentFilters(Landroid/content/ComponentName;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setGlobalSetting(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 AND GLOBAL_SETTINGS_WHITELIST.contains(x2) ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setMasterVolumeMuted(Landroid/content/ComponentName;Z)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.resetPassword(Ljava/lang/String;I)Z
	 [ !UserManager.getUserInfo(UserHandle.getCallingUserId()).isManagedProfile() AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.addCrossProfileWidgetProvider(Landroid/content/ComponentName;Ljava/lang/String;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.switchUser(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setLockTaskPackages(Landroid/content/ComponentName;[Ljava/lang/String;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setRestrictionsProvider(Landroid/content/ComponentName;Landroid/content/ComponentName;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPermittedAccessibilityServices(Landroid/content/ComponentName;Ljava/util/List;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getActiveAdmins(I)Ljava/util/List;
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.addPersistentPreferredActivity(Landroid/content/ComponentName;Landroid/content/IntentFilter;Landroid/content/ComponentName;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.isUninstallBlocked(Landroid/content/ComponentName;Ljava/lang/String;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setActiveAdmin(Landroid/content/ComponentName;ZI)V
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x3 AND android.permission.MANAGE_DEVICE_ADMINS ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.MANAGE_DEVICE_ADMINS ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.MANAGE_DEVICE_ADMINS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.MANAGE_DEVICE_ADMINS ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setRecommendedGlobalProxy(Landroid/content/ComponentName;Landroid/net/ProxyInfo;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.installCaCert(Landroid/content/ComponentName;[B)Z
	 [ x1 = null AND mPackageManager(mUserData.get(UserHandle.getCallingUid()).mDelegatedCertInstallerPackage).uid = Binder.getCallingUid() ]
	 OR
	 [ x1 = null AND android.permission.MANAGE_CA_CERTIFICATES ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPermittedInputMethods(Landroid/content/ComponentName;Ljava/util/List;)Z
	 [ UserManager.getUserInfo(UserHandle.getCallingUserId()).isManagedProfile() AND UserManager.getUserInfo(UserHandle.getCallingUserId()).profileGroupId() = ActivityManager.getCurrentUser() ]
	 OR
	 [ !UserManager.getUserInfo(UserHandle.getCallingUserId()).isManagedProfile() AND UserHandle.getCallingUserId() =  ActivityManager.getCurrentUser() ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setApplicationRestrictions(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPermittedAccessibilityServices(Landroid/content/ComponentName;)Ljava/util/List;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.isMasterVolumeMuted(Landroid/content/ComponentName;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.isApplicationHidden(Landroid/content/ComponentName;Ljava/lang/String;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getCrossProfileWidgetProviders(Landroid/content/ComponentName;)Ljava/util/List;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.enableSystemAppWithIntent(Landroid/content/ComponentName;Landroid/content/Intent;)I
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.enforceCanManageCaCerts(Landroid/content/ComponentName;)V
	 [ x1 = null AND mPackageManager(mUserData.get(UserHandle.getCallingUid()).mDelegatedCertInstallerPackage).uid = Binder.getCallingUid() ]
	 OR
	 [ x1 = null AND android.permission.MANAGE_CA_CERTIFICATES ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getGlobalProxyAdmin(I)Landroid/content/ComponentName;
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getBluetoothContactSharingDisabled(Landroid/content/ComponentName;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setStorageEncryption(Landroid/content/ComponentName;Z)I
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.addCrossProfileIntentFilter(Landroid/content/ComponentName;Landroid/content/IntentFilter;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.isRemovingAdmin(Landroid/content/ComponentName;I)Z
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordExpirationTimeout(Landroid/content/ComponentName;I)J
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getStorageEncryptionStatus(I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordMinimumUpperCase(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getTrustAgentConfiguration(Landroid/content/ComponentName;Landroid/content/ComponentName;I)Ljava/util/List;
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x3 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordMinimumLowerCase(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordExpirationTimeout(Landroid/content/ComponentName;J)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordMinimumLength(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setMaximumTimeToLock(Landroid/content/ComponentName;J)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getKeyguardDisabledFeatures(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordQuality(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordMinimumLetters(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordMinimumNonLetter(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setUserEnabled(Landroid/content/ComponentName;)Z
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getMaximumTimeToLock(Landroid/content/ComponentName;I)J
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordHistoryLength(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordMinimumLetters(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordQuality(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.createAndInitializeUser(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/Bundle;)Landroid/os/UserHandle;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.lockNow()V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setDeviceOwner(Ljava/lang/String;Ljava/lang/String;)Z
	 [ android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordMinimumUpperCase(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordMinimumNumeric(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordHistoryLength(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setKeyguardDisabledFeatures(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordMinimumSymbols(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getProfileWithMinimumFailedPasswordsForWipe(I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setMaximumFailedPasswordsForWipe(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordMinimumLowerCase(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.createUser(Landroid/content/ComponentName;Ljava/lang/String;)Landroid/os/UserHandle;
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordMinimumSymbols(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.wipeData(II)V
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ Binder.getCallingUid() = 0 AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ Binder.getCallingUid() = 0 AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordMinimumNumeric(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordExpiration(Landroid/content/ComponentName;I)J
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setPasswordMinimumLength(Landroid/content/ComponentName;I)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getPasswordMinimumNonLetter(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.installKeyPair(Landroid/content/ComponentName;[B[BLjava/lang/String;)Z
	 [ x1 = null AND mPackageManager(mUserData.get(UserHandle.getCallingUid()).mDelegatedCertInstallerPackage).uid = Binder.getCallingUid() ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ x1 != null AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setTrustAgentConfiguration(Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/os/PersistableBundle;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 AND !UserManager.getUserInfo(x1).isManagedProfile() ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.isActivePasswordSufficient(I)Z
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getCurrentFailedPasswordAttempts(I)I
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.clearDeviceInitializer(Landroid/content/ComponentName;)V
	 [ mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.setDeviceInitializer(Landroid/content/ComponentName;Landroid/content/ComponentName;)Z
	 [ x1= null AND android.permission.MANAGE_DEVICE_ADMINS ]
	 OR
	 [ x1!= null AND mUserData.get(UserHandle.getCallingUid()).mAdminMap[x1].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]
	 OR
	 [ x1!= null AND mUserData.get(UserHandle.getCallingUid()).mAdminList[].getUid() = Binder.getCallingUid() AND UserHandle.getCallingUserId() =  0 ]

Lcom/android/server/devicepolicy/DevicePolicyManagerService.getMaximumFailedPasswordsForWipe(Landroid/content/ComponentName;I)I
	 [ UserHandle.getUserId(Binder.getCallingUid()) = x2 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/display/DisplayManagerService$BinderService.connectWifiDisplay(Ljava/lang/String;)V
	 [   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/display/DisplayManagerService$BinderService.stopWifiDisplayScan()V
	 [   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/display/DisplayManagerService$BinderService.requestColorTransform(II)V
	 [   android.permission.CONFIGURE_DISPLAY_COLOR_TRANSFORM ]

Lcom/android/server/display/DisplayManagerService$BinderService.resumeWifiDisplay()V
	 [   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/display/DisplayManagerService$BinderService.pauseWifiDisplay()V
	 [   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/display/DisplayManagerService$BinderService.forgetWifiDisplay(Ljava/lang/String;)V
	 [   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/display/DisplayManagerService$BinderService.createVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;Ljava/lang/String;IIILandroid/view/Surface;I)I
	 [ PackageManager.getPackagesForUid(Binder.getCallingUid())[] = x3 AND x9 & 1 << 4 != 0 AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ PackageManager.getPackagesForUid(Binder.getCallingUid())[] = x3 AND x9 & 1 << 4 != 0 AND android.permission.CAPTURE_VIDEO_OUTPUT ]
	 OR
	 [ PackageManager.getPackagesForUid(Binder.getCallingUid())[] = x3 AND x9 & 1 << 4 != 0 AND android.permission.CAPTURE_SECURE_VIDEO_OUTPUT ]
	 OR
	 [ PackageManager.getPackagesForUid(Binder.getCallingUid())[] = x3 AND x9 & 1 << 2 != 0 AND android.permission.CAPTURE_SECURE_VIDEO_OUTPUT ]

Lcom/android/server/display/DisplayManagerService$BinderService.renameWifiDisplay(Ljava/lang/String;Ljava/lang/String;)V
	 [   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/display/DisplayManagerService$BinderService.startWifiDisplayScan()V
	 [   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/display/DisplayManagerService$BinderService.awaken()V
	 [   android.permission.WRITE_DREAM_STATE ]

Lcom/android/server/dreams/DreamManagerService$BinderService.isDreaming()Z
	 [   android.permission.READ_DREAM_STATE ]

Lcom/android/server/dreams/DreamManagerService$BinderService.setDreamComponents([Landroid/content/ComponentName;)V
	 [   android.permission.WRITE_DREAM_STATE ]

Lcom/android/server/dreams/DreamManagerService$BinderService.dream()V
	 [   android.permission.WRITE_DREAM_STATE ]

Lcom/android/server/dreams/DreamManagerService$BinderService.getDefaultDreamComponent()Landroid/content/ComponentName;
	 [   android.permission.READ_DREAM_STATE ]

Lcom/android/server/dreams/DreamManagerService$BinderService.getDreamComponents()[Landroid/content/ComponentName;
	 [   android.permission.READ_DREAM_STATE ]

Lcom/android/server/dreams/DreamManagerService$BinderService.testDream(Landroid/content/ComponentName;)V
	 [   android.permission.WRITE_DREAM_STATE ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.authenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)V
	 [ android.permission.USE_FINGERPRINT AND opPackageName = x6 AND android.permission.MANAGE_FINGERPRINT ]
	 OR
	 [ android.permission.USE_FINGERPRINT AND UserManager.getEnabledProfiles(UserHande.getCallingUserId())[] = UserHandle.getCallingUserId() AND ActivityManager.getRunningAppProcesses[].pid = Binder.getCallingPid() AND ActivityManager.getRunningAppProcesses[].uid = Binder.getCallingUid() AND ActivityManager.getRunningAppProcesses[].importance = 100 AND android.permission.MANAGE_FINGERPRINT ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.cancelEnrollment(Landroid/os/IBinder;)V
	 [   android.permission.MANAGE_FINGERPRINT ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.postEnroll(Landroid/os/IBinder;)I
	 [   android.permission.MANAGE_FINGERPRINT ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.isHardwareDetected(JLjava/lang/String;)Z
	 [ android.permission.USE_FINGERPRINT AND opPackageName = x2 ]
	 OR
	 [ android.permission.USE_FINGERPRINT AND UserManager.getEnabledProfiles(UserHande.getCallingUserId())[] = UserHandle.getCallingUserId() ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.getEnrolledFingerprints(ILjava/lang/String;)Ljava/util/List;
	 [ android.permission.USE_FINGERPRINT AND opPackageName = x2 ]
	 OR
	 [ android.permission.USE_FINGERPRINT AND UserManager.getEnabledProfiles(UserHande.getCallingUserId())[] = UserHandle.getCallingUserId() ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.rename(IILjava/lang/String;)V
	 [   android.permission.MANAGE_FINGERPRINT ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.resetTimeout([B)V
	 [   android.permission.RESET_FINGERPRINT_LOCKOUT ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.hasEnrolledFingerprints(ILjava/lang/String;)Z
	 [ android.permission.USE_FINGERPRINT AND opPackageName = x2 ]
	 OR
	 [ android.permission.USE_FINGERPRINT AND UserManager.getEnabledProfiles(UserHande.getCallingUserId())[] = UserHandle.getCallingUserId() ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;)V
	 [ android.permission.USE_FINGERPRINT AND opPackageName = x2 ]
	 OR
	 [ android.permission.USE_FINGERPRINT AND UserManager.getEnabledProfiles(UserHande.getCallingUserId())[] = UserHandle.getCallingUserId() ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.preEnroll(Landroid/os/IBinder;)J
	 [   android.permission.MANAGE_FINGERPRINT ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.remove(Landroid/os/IBinder;IILandroid/hardware/fingerprint/IFingerprintServiceReceiver;)V
	 [   android.permission.MANAGE_FINGERPRINT ]

Lcom/android/server/fingerprint/FingerprintService$FingerprintServiceWrapper.enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprint/IFingerprintServiceReceiver;I)V
	 [   android.permission.MANAGE_FINGERPRINT ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.sendVendorCommand(II[BZ)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.getPortInfo()Ljava/util/List;
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.getInputDevices()Ljava/util/List;
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.stopOneTouchRecord(I)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.getSupportedTypes()[I
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.setSystemAudioMute(Z)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.queryDisplayStatus(Landroid/hardware/hdmi/IHdmiControlCallback;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.addVendorCommandListener(Landroid/hardware/hdmi/IHdmiVendorCommandListener;I)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.sendStandby(II)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.sendKeyEvent(IIZ)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.getSystemAudioMode()Z
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.setArcMode(Z)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.sendMhlVendorCommand(III[B)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.startTimerRecording(II[B)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.setProhibitMode(Z)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.canChangeSystemAudioMode()Z
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.getDeviceList()Ljava/util/List;
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.setSystemAudioVolume(III)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.clearTimerRecording(II[B)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/hdmi/HdmiControlService$BinderService.startOneTouchRecord(I[B)V
	 [   android.permission.HDMI_CEC ]

Lcom/android/server/input/InputManagerService.tryPointerSpeed(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.SET_KEYBOARD_LAYOUT ]

Lcom/android/server/input/InputManagerService.removeKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.SET_KEYBOARD_LAYOUT ]

Lcom/android/server/input/InputManagerService.addKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.SET_KEYBOARD_LAYOUT ]

Lcom/android/server/input/InputManagerService.setCurrentKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;Ljava/lang/String;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.SET_KEYBOARD_LAYOUT ]

Lcom/android/server/input/InputManagerService.registerTabletModeChangedListener(Landroid/hardware/input/ITabletModeChangedListener;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.TABLET_MODE_LISTENER ]

Lcom/android/server/input/InputManagerService.setTouchCalibrationForInputDevice(Ljava/lang/String;ILandroid/hardware/input/TouchCalibration;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.SET_KEYBOARD_LAYOUT ]

Lcom/android/server/job/JobSchedulerService$JobSchedulerStub.schedule(Landroid/app/job/JobInfo;)I
	 [ PackageManager.getServiceInfo(x1).applicationinfo.uid = Binder.getCallingUid() AND !x1.isPersisted() ]
	 OR
	 [ PackageManager.getServiceInfo(x1).applicationinfo.uid = Binder.getCallingUid() AND x1.isPersisted() AND   android.permission.RECEIVE_BOOT_COMPLETED ]

Lcom/android/server/media/MediaRouterService.registerClientAsUser(Landroid/media/IMediaRouterClient;Ljava/lang/String;I)V
	 [ PackageManager.getPackagesForUid(Binder.getCallingUid())[] = x2 AND   android.permission.CONFIGURE_WIFI_DISPLAY ]

Lcom/android/server/media/MediaSessionRecord$SessionStub.setFlags(I)V
	 [   android.permission.MODIFY_PHONE_STATE ]

Lcom/android/server/media/MediaSessionService$SessionManagerImpl.createSession(Ljava/lang/String;Landroid/media/session/ISessionCallback;Ljava/lang/String;I)Landroid/media/session/ISession;
	 [ PackageManager.getPackagesForUid()[] = x1.getPackageName() ]

Lcom/android/server/media/MediaSessionService$SessionManagerImpl.addSessionsListener(Landroid/media/session/IActiveSessionsListener;Landroid/content/ComponentName;I)V
	 [ PackageManager.getPackagesForUid()[] = x2.getPackageName() AND mAudioManagerInternal.getVolumeControllerUid() = Binder.getCallingUid() ]
	 OR
	 [ PackageManager.getPackagesForUid()[] = x2.getPackageName() AND android.permission.MEDIA_CONTENT_CONTROL ]

Lcom/android/server/media/MediaSessionService$SessionManagerImpl.getSessions(Landroid/content/ComponentName;I)Ljava/util/List;
	 [ PackageManager.getPackagesForUid()[] = x1.getPackageName() AND mAudioManagerInternal.getVolumeControllerUid() = Binder.getCallingUid() ]
	 OR
	 [ PackageManager.getPackagesForUid()[] = x1.getPackageName() AND android.permission.MEDIA_CONTENT_CONTROL ]

Lcom/android/server/media/MediaSessionService$SessionManagerImpl.setRemoteVolumeController(Landroid/media/IRemoteVolumeController;)V
	 [ mAudioManagerInternal.getVolumeControllerUid() = Binder.getCallingUid() ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService.addCallback(Landroid/media/projection/IMediaProjectionWatcherCallback;)V
	 [   android.permission.MANAGE_MEDIA_PROJECTION ]

Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService.removeCallback(Landroid/media/projection/IMediaProjectionWatcherCallback;)V
	 [   android.permission.MANAGE_MEDIA_PROJECTION ]

Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService.stopActiveProjection()V
	 [   android.permission.MANAGE_MEDIA_PROJECTION ]

Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService.getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo;
	 [   android.permission.MANAGE_MEDIA_PROJECTION ]

Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService.createProjection(ILjava/lang/String;IZ)Landroid/media/projection/IMediaProjection;
	 [ android.permission.MANAGE_MEDIA_PROJECTION ]

Lcom/android/server/midi/MidiService.setDeviceStatus(Landroid/media/midi/IMidiDeviceServer;Landroid/media/midi/MidiDeviceStatus;)V
	 [ Binder.getCallingUid()  = mDevicesByServer.get(x1) ]

Lcom/android/server/midi/MidiService.openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V
	 [ mDevicesByInfo.get(x2).isUidAllowed(Binder.getCallingUid()) ]

Lcom/android/server/midi/MidiService.registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;I)Landroid/media/midi/MidiDeviceInfo;
	 [ Binder.getCallingUid() = 1000 AND x7 = 1 ]

Lcom/android/server/midi/MidiService.getDevices()[Landroid/media/midi/MidiDeviceInfo;
	 [ mDevicesByInfo[].isUidAllowed(Binder.getCallingUid()) ]

Lcom/android/server/net/NetworkPolicyManagerService.getNetworkQuotaInfo(Landroid/net/NetworkState;)Landroid/net/NetworkQuotaInfo;
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/net/NetworkPolicyManagerService.setNetworkPolicies([Landroid/net/NetworkPolicy;)V
	 [   android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.unregisterListener(Landroid/net/INetworkPolicyListener;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/net/NetworkPolicyManagerService.getUidPolicy(I)I
	 [   android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.factoryReset(Ljava/lang/String;)V
	 [ android.permission.CONNECTIVITY_INTERNAL AND  android.permission.MANAGE_NETWORK_POLICY AND android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.CONNECTIVITY_INTERNAL AND  android.permission.MANAGE_NETWORK_POLICY AND android.permission.READ_PHONE_STATE ]

Lcom/android/server/net/NetworkPolicyManagerService.removeUidPolicy(II)V
	 [ android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.getUidsWithPolicy(I)[I
	 [   android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.setDeviceIdleMode(Z)V
	 [   android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.setUidPolicy(II)V
	 [ android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy;
	 [ android.permission.MANAGE_NETWORK_POLICY AND android.permission.READ_PRIVILEGED_PHONE_STATE ]
	 OR
	 [ android.permission.MANAGE_NETWORK_POLICY AND android.permission.READ_PHONE_STATE ]

Lcom/android/server/net/NetworkPolicyManagerService.snoozeLimit(Landroid/net/NetworkTemplate;)V
	 [ android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.getRestrictBackground()Z
	 [   android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.addUidPolicy(II)V
	 [ android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.registerListener(Landroid/net/INetworkPolicyListener;)V
	 [   android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/net/NetworkPolicyManagerService.setRestrictBackground(Z)V
	 [ android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkPolicyManagerService.isUidForeground(I)Z
	 [   android.permission.MANAGE_NETWORK_POLICY ]

Lcom/android/server/net/NetworkStatsService.getNetworkTotalBytes(Landroid/net/NetworkTemplate;JJ)J
	 [   android.permission.READ_NETWORK_USAGE_HISTORY ]

Lcom/android/server/net/NetworkStatsService.incrementOperationCount(III)V
	 [ Binder.getCallingUid() = x1 ]
	 OR
	 [   android.permission.MODIFY_NETWORK_ACCOUNTING ]

Lcom/android/server/net/NetworkStatsService.setUidForeground(IZ)V
	 [   android.permission.MODIFY_NETWORK_ACCOUNTING ]

Lcom/android/server/net/NetworkStatsService.getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;
	 [ Binder.getCallingUid() = x1 ]
	 OR
	 [   android.permission.ACCESS_NETWORK_STATE ]

Lcom/android/server/net/NetworkStatsService.advisePersistThreshold(J)V
	 [ android.permission.MODIFY_NETWORK_ACCOUNTING ]

Lcom/android/server/net/NetworkStatsService.forceUpdateIfaces()V
	 [   android.permission.READ_NETWORK_USAGE_HISTORY ]

Lcom/android/server/net/NetworkStatsService.forceUpdate()V
	 [   android.permission.READ_NETWORK_USAGE_HISTORY ]

Lcom/android/server/notification/NotificationManagerService$5.matchesCallFilter(Landroid/os/Bundle;)Z
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/notification/NotificationManagerService$5.enqueueToast(Ljava/lang/String;Landroid/app/ITransientNotification;I)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.getAppActiveNotifications(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ UserHandle.isSameApp(PackageManager.getApplicationInfo(x1).uid, Binder.getCallingUid()) ]

Lcom/android/server/notification/NotificationManagerService$5.cancelAllNotifications(Ljava/lang/String;I)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ UserHandle.isSameApp(PackageManager.getApplicationInfo(x1).uid, Binder.getCallingUid()) ]

Lcom/android/server/notification/NotificationManagerService$5.getHistoricalNotifications(Ljava/lang/String;I)[Landroid/service/notification/StatusBarNotification;
	 [ android.permission.ACCESS_NOTIFICATIONS ]

Lcom/android/server/notification/NotificationManagerService$5.setNotificationsEnabledForPackage(Ljava/lang/String;IZ)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.setNotificationPolicyAccessGranted(Ljava/lang/String;Z)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/notification/NotificationManagerService$5.cancelNotificationWithTag(Ljava/lang/String;Ljava/lang/String;II)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ UserHandle.isSameApp(PackageManager.getApplicationInfo(x1).uid, Binder.getCallingUid()) ]

Lcom/android/server/notification/NotificationManagerService$5.getPackagesRequestingNotificationPolicyAccess()[Ljava/lang/String;
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/notification/NotificationManagerService$5.getEffectsSuppressor()Landroid/content/ComponentName;
	 [ AudioManagerInternal.getVolumeControllerUid()=Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/notification/NotificationManagerService$5.isSystemConditionProviderEnabled(Ljava/lang/String;)Z
	 [ AudioManagerInternal.getVolumeControllerUid()=Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/notification/NotificationManagerService$5.registerListener(Landroid/service/notification/INotificationListener;Landroid/content/ComponentName;I)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/notification/NotificationManagerService$5.isNotificationPolicyAccessGrantedForPackage(Ljava/lang/String;)Z
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ UserHandle.isSameApp(PackageManager.getApplicationInfo(x1).uid, Binder.getCallingUid()) ]

Lcom/android/server/notification/NotificationManagerService$5.setZenMode(ILandroid/net/Uri;Ljava/lang/String;)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ AudioManagerInternal.getVolumeControllerUid()=Binder.getCallingUid() ]

Lcom/android/server/notification/NotificationManagerService$5.areNotificationsEnabledForPackage(Ljava/lang/String;I)Z
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.getZenModeConfig()Landroid/service/notification/ZenModeConfig;
	 [ AudioManagerInternal.getVolumeControllerUid()=Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/notification/NotificationManagerService$5.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;[II)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ UserHandle.isSameApp(PackageManager.getApplicationInfo(x1).uid, Binder.getCallingUid()) ]

Lcom/android/server/notification/NotificationManagerService$5.getActiveNotifications(Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;
	 [ android.permission.ACCESS_NOTIFICATIONS ]

Lcom/android/server/notification/NotificationManagerService$5.setPackageVisibilityOverride(Ljava/lang/String;II)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.setPackagePeekable(Ljava/lang/String;IZ)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.getPackagePriority(Ljava/lang/String;I)I
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.getPackageVisibilityOverride(Ljava/lang/String;I)I
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.setZenModeConfig(Landroid/service/notification/ZenModeConfig;Ljava/lang/String;)Z
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]

Lcom/android/server/notification/NotificationManagerService$5.setPackagePriority(Ljava/lang/String;II)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.MANAGE_NOTIFICATIONS ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid())=1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid())=1001 ]
	 [ UserHandle.isSameApp(PackageManager.getApplicationInfo(x1).uid, Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid())=1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid())=1001 ]
	 [ android.permission.STATUS_BAR_SERVICE ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid())=1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid())=1001 ]

Lcom/android/server/notification/NotificationManagerService$5.requestZenModeConditions(Landroid/service/notification/IConditionListener;I)V
	 [ AudioManagerInternal.getVolumeControllerUid()=Binder.getCallingUid() ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1000 ]
	 OR
	 [ UserHandle.getAppId(Binder.getCallingUid()) = 1001 ]
	 OR
	 [ android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/os/SchedulingPolicyService.requestPriority(III)I
	 [ Binder.getCallingUid() = 1013 ]

Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl.startActivityAsUser(Landroid/content/ComponentName;Landroid/graphics/Rect;Landroid/os/Bundle;Landroid/os/UserHandle;)V
	 [ x4.getIdentifier() = UserHandle.getCallingUserId() ]
	 OR
	 [ UserManager.getUserInfo(x4.getIdentifier()).profileGroupId = UserManager.getUserInfo(UserHandle.getCallingUserId()).profileGroupId ]

Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl.isActivityEnabled(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z
	 [ x2.getIdentifier() = UserHandle.getCallingUserId() ]
	 OR
	 [ UserManager.getUserInfo(x2.getIdentifier()).profileGroupId = UserManager.getUserInfo(UserHandle.getCallingUserId()).profileGroupId ]

Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl.isPackageEnabled(Ljava/lang/String;Landroid/os/UserHandle;)Z
	 [ x2.getIdentifier() = UserHandle.getCallingUserId() ]
	 OR
	 [ UserManager.getUserInfo(x2.getIdentifier()).profileGroupId = UserManager.getUserInfo(UserHandle.getCallingUserId()).profileGroupId ]

Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl.showAppDetailsAsUser(Landroid/content/ComponentName;Landroid/graphics/Rect;Landroid/os/Bundle;Landroid/os/UserHandle;)V
	 [ x4.getIdentifier() = UserHandle.getCallingUserId() ]
	 OR
	 [ UserManager.getUserInfo(x4.getIdentifier()).profileGroupId = UserManager.getUserInfo(UserHandle.getCallingUserId()).profileGroupId ]

Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl.resolveActivity(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/pm/ResolveInfo;
	 [ x2.getIdentifier() = UserHandle.getCallingUserId() ]
	 OR
	 [ UserManager.getUserInfo(x2.getIdentifier()).profileGroupId = UserManager.getUserInfo(UserHandle.getCallingUserId()).profileGroupId ]

Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl.getLauncherActivities(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;
	 [ x2.getIdentifier() = UserHandle.getCallingUserId() ]
	 OR
	 [ UserManager.getUserInfo(x2.getIdentifier()).profileGroupId = UserManager.getUserInfo(UserHandle.getCallingUserId()).profileGroupId ]

Lcom/android/server/pm/PackageInstallerService.setPermissionsResult(IZ)V
	 [   android.permission.INSTALL_PACKAGES ]

Lcom/android/server/pm/PackageInstallerService.uninstall(Ljava/lang/String;Ljava/lang/String;ILandroid/content/IntentSender;I)V
	 [ Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x5, $no_debugging_features$) AND x5 = UserHandle.getUserId(Binder.getCallingUid()) AND android.permission.DELETE_PACKAGES ]
	 OR
	 [ Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x5, $no_debugging_features$) AND android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.DELETE_PACKAGES ]
	 OR
	 [ !Binder.getCallingUid() = 2000 AND x5 = UserHandle.getUserId(Binder.getCallingUid()) AND AppOpps.checkPackage(Binder.getCallingUid(), x2) AND android.permission.DELETE_PACKAGES ]
	 OR
	 [ !Binder.getCallingUid() = 2000 AND android.permission.INTERACT_ACROSS_USERS_FULL AND AppOpps.checkPackage(Binder.getCallingUid(), x2) AND android.permission.DELETE_PACKAGES ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND AppOpps.checkPackage(Binder.getCallingUid(), x2) AND android.permission.DELETE_PACKAGES ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.DELETE_PACKAGES ]

Lcom/android/server/pm/PackageManagerService.verifyIntentFilter(IILjava/util/List;)V
	 [ android.permission.INTENT_FILTER_VERIFICATION_AGENT ]

Lcom/android/server/pm/PackageManagerService.movePackage(Ljava/lang/String;Ljava/lang/String;)I
	 [ android.permission.MOVE_PACKAGE ]

Lcom/android/server/pm/PackageManagerService.getComponentEnabledSetting(Landroid/content/ComponentName;I)I
	 [ x2 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.deletePackageAsUser(Ljava/lang/String;Landroid/content/pm/IPackageDeleteObserver;II)V
	 [ android.permission.DELETE_PACKAGES AND UserHandle.getUserId(Binder.getCallingUid()) = x3 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ android.permission.DELETE_PACKAGES AND android.permission.INTERACT_ACROSS_USERS_FULL AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]

Lcom/android/server/pm/PackageManagerService.getInstalledPackages(II)Landroid/content/pm/ParceledListSlice;
	 [ x2 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.extendVerificationTimeout(IIJ)V
	 [ android.permission.PACKAGE_VERIFICATION_AGENT? ]

Lcom/android/server/pm/PackageManagerService.canForwardTo(Landroid/content/Intent;Ljava/lang/String;II)Z
	 [   android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.shouldShowRequestPermissionRationale(Ljava/lang/String;Ljava/lang/String;I)Z
	 [ UserHandle.getCallingUserId() = x3 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.unregisterMoveCallback(Landroid/content/pm/IPackageMoveObserver;)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/pm/PackageManagerService.clearApplicationUserData(Ljava/lang/String;Landroid/content/pm/IPackageDataObserver;I)V
	 [ android.permission.CLEAR_APP_USER_DATA AND x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.CLEAR_APP_USER_DATA AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.CLEAR_APP_USER_DATA AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.CLEAR_APP_USER_DATA AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.setPackageStoppedState(Ljava/lang/String;ZI)V
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND x3 = UserHandle.getUserId(Binder.getCallingUid()) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND x3 = UserHandle.getUserId(Binder.getCallingUid()) AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS_FULL AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND x3 = UserHandle.getUserId(Binder.getCallingUid()) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND x3 = UserHandle.getUserId(Binder.getCallingUid()) AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS_FULL AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND Binder.getCallingUid() = 0 ]

Lcom/android/server/pm/PackageManagerService.updatePermissionFlagsForAllApps(III)V
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z
	 [ x3 = UserHandle.getCallingUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.clearPackagePreferredActivities(Ljava/lang/String;)V
	 [ mPackages.get(x1).applicationInfo.uid = Binder.getCallingUid() ]
	 OR
	 [ android.permission.SET_PREFERRED_APPLICATIONS ]

Lcom/android/server/pm/PackageManagerService.getPackageInfo(Ljava/lang/String;II)Landroid/content/pm/PackageInfo;
	 [ x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.setDefaultBrowserPackageName(Ljava/lang/String;I)Z
	 [ android.permission.SET_PREFERRED_APPLICATIONS ]

Lcom/android/server/pm/PackageManagerService.setPermissionEnforced(Ljava/lang/String;Z)V
	 [   android.permission.GRANT_RUNTIME_PERMISSIONS ]

Lcom/android/server/pm/PackageManagerService.verifyPendingInstall(II)V
	 [ android.permission.PACKAGE_VERIFICATION_AGENT ]

Lcom/android/server/pm/PackageManagerService.freeStorageAndNotify(Ljava/lang/String;JLandroid/content/pm/IPackageDataObserver;)V
	 [   android.permission.CLEAR_APP_CACHE ]

Lcom/android/server/pm/PackageManagerService.getApplicationInfo(Ljava/lang/String;II)Landroid/content/pm/ApplicationInfo;
	 [ x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.getVerifierDeviceIdentity()Landroid/content/pm/VerifierDeviceIdentity;
	 [   android.permission.PACKAGE_VERIFICATION_AGENT ]

Lcom/android/server/pm/PackageManagerService.getActivityInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ActivityInfo;
	 [ x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.deleteApplicationCacheFiles(Ljava/lang/String;Landroid/content/pm/IPackageDataObserver;)V
	 [   android.permission.DELETE_CACHE_FILES ]

Lcom/android/server/pm/PackageManagerService.setApplicationEnabledSetting(Ljava/lang/String;IIILjava/lang/String;)V
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS_FULL AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS_FULL AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND Binder.getCallingUid() = 0 ]

Lcom/android/server/pm/PackageManagerService.getPermissionFlags(Ljava/lang/String;Ljava/lang/String;I)I
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.getApplicationEnabledSetting(Ljava/lang/String;I)I
	 [ x2 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.isPackageAvailable(Ljava/lang/String;I)Z
	 [ x2 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.updateIntentVerificationStatus(Ljava/lang/String;II)Z
	 [   android.permission.SET_PREFERRED_APPLICATIONS ]

Lcom/android/server/pm/PackageManagerService.getMoveStatus(I)I
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/pm/PackageManagerService.revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.registerMoveCallback(Landroid/content/pm/IPackageMoveObserver;)V
	 [   android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/pm/PackageManagerService.resetApplicationPreferences(I)V
	 [   android.permission.SET_PREFERRED_APPLICATIONS ]

Lcom/android/server/pm/PackageManagerService.setComponentEnabledSetting(Landroid/content/ComponentName;III)V
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS_FULL AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND android.permission.INTERACT_ACROSS_USERS AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.CHANGE_COMPONENT_ENABLED_STATE AND Binder.getCallingUid() = 0 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x4,  $no_debugging_features$) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND x4 = UserHandle.getUserId(Binder.getCallingUid()) AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS_FULL AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND android.permission.INTERACT_ACROSS_USERS AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), mSettings.mPackages.get(x1).uid) AND Binder.getCallingUid() = 0 ]

Lcom/android/server/pm/PackageManagerService.freeStorage(Ljava/lang/String;JLandroid/content/IntentSender;)V
	 [   android.permission.CLEAR_APP_CACHE ]

Lcom/android/server/pm/PackageManagerService.getServiceInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ServiceInfo;
	 [ x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.addCrossProfileIntentFilter(Landroid/content/IntentFilter;Ljava/lang/String;III)V
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.getAppId(Binder.getCallingUid()) = 1000 AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3, $no_debugging_features$) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.isSameApp(UserHandle.getUserId(Binder.getCallingUid(), x2) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3, $no_debugging_features$) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.getAppId(Binder.getCallingUid()) = 1000 AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.isSameApp(UserHandle.getUserId(Binder.getCallingUid(), x2) AND !Binder.getCallingUid() = 2000 ]

Lcom/android/server/pm/PackageManagerService.getProviderInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ProviderInfo;
	 [ x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.getPreferredActivityBackup(I)[B
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/pm/PackageManagerService.resetRuntimePermissions()V
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.setInstallLocation(I)Z
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/pm/PackageManagerService.updateExternalMediaStatus(ZZ)V
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/pm/PackageManagerService.clearCrossProfileIntentFilters(ILjava/lang/String;)V
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.getAppId(Binder.getCallingUid()) = 1000 AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x1, $no_debugging_features$) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.isSameApp(UserHandle.getUserId(Binder.getCallingUid(), x2) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x1, $no_debugging_features$) ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.getAppId(Binder.getCallingUid()) = 1000 AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [   android.permission.INTERACT_ACROSS_USERS_FULL AND UserHandle.isSameApp(UserHandle.getUserId(Binder.getCallingUid(), x2) AND !Binder.getCallingUid() = 2000 ]

Lcom/android/server/pm/PackageManagerService.replacePreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;I)V
	 [ x5 = UserHandle.getUserId(Binder.getCallingUid()) AND android.permission.SET_PREFERRED_APPLICATIONS ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.SET_PREFERRED_APPLICATIONS ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.SET_PREFERRED_APPLICATIONS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.SET_PREFERRED_APPLICATIONS ]

Lcom/android/server/pm/PackageManagerService.grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;III)V
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND x5 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.GRANT_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND x5 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.REVOKE_RUNTIME_PERMISSIONS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.deletePackage(Ljava/lang/String;Landroid/content/pm/IPackageDeleteObserver2;II)V
	 [ android.permission.DELETE_PACKAGES AND UserHandle.getUserId(Binder.getCallingUid()) = x3 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ android.permission.DELETE_PACKAGES AND android.permission.INTERACT_ACROSS_USERS_FULL AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]

Lcom/android/server/pm/PackageManagerService.getApplicationHiddenSettingAsUser(Ljava/lang/String;I)Z
	 [ android.permission.MANAGE_USERS AND x2 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ android.permission.MANAGE_USERS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.MANAGE_USERS AND Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/pm/PackageManagerService.setApplicationHiddenSettingAsUser(Ljava/lang/String;ZI)Z
	 [ android.permission.MANAGE_USERS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ android.permission.MANAGE_USERS AND android.permission.INTERACT_ACROSS_USERS_FULL AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x3,  $no_debugging_features$) ]
	 OR
	 [ android.permission.MANAGE_USERS AND x3 = UserHandle.getUserId(Binder.getCallingUid()) AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.MANAGE_USERS AND android.permission.INTERACT_ACROSS_USERS_FULL AND !Binder.getCallingUid() = 2000 ]
	 OR
	 [ android.permission.MANAGE_USERS AND Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.MANAGE_USERS AND Binder.getCallingUid() = 0 ]

Lcom/android/server/pm/PackageManagerService.installExistingPackageAsUser(Ljava/lang/String;I)I
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x2,  $no_debugging_features$) AND x2 = UserHandle.getUserId(Binder.getCallingUid()) AND !UserManager.hasUserRestriction(x2,  $no_install_apps$) ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x2,  $no_debugging_features$) AND android.permission.INTERACT_ACROSS_USERS_FULL AND !UserManager.hasUserRestriction(x2,  $no_install_apps$) ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND !Binder.getCallingUid() = 2000 AND x5 = UserHandle.getUserId(Binder.getCallingUid()) AND !UserManager.hasUserRestriction(x2,  $no_install_apps$) ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND !Binder.getCallingUid() = 2000 AND android.permission.INTERACT_ACROSS_USERS_FULL AND !UserManager.hasUserRestriction(x2,  $no_install_apps$) ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 1000 AND !UserManager.hasUserRestriction(x2,  $no_install_apps$) ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 0 AND !UserManager.hasUserRestriction(x2,  $no_install_apps$) ]

Lcom/android/server/pm/PackageManagerService.resolveIntent(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
	 [ x4 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.movePrimaryStorage(Ljava/lang/String;)I
	 [  android.permission.MOVE_PACKAGE AND android.permission.MOUNT_UNMOUNT_FILESYSTEMS ]

Lcom/android/server/pm/PackageManagerService.addPreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;I)V
	 [ x5 = UserHandle.getUserId(Binder.getCallingUid()) AND android.permission.SET_PREFERRED_APPLICATIONS ]
	 OR
	 [ Binder.getCallingUid() = 1000 AND android.permission.SET_PREFERRED_APPLICATIONS ]
	 OR
	 [ Binder.getCallingUid() = 0 AND android.permission.SET_PREFERRED_APPLICATIONS ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL AND android.permission.SET_PREFERRED_APPLICATIONS ]

Lcom/android/server/pm/PackageManagerService.resolveService(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
	 [ x4 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.addOnPermissionsChangeListener(Landroid/content/pm/IOnPermissionsChangeListener;)V
	 [   android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS ]

Lcom/android/server/pm/PackageManagerService.getReceiverInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ActivityInfo;
	 [ x3 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.getPackageSizeInfo(Ljava/lang/String;ILandroid/content/pm/IPackageStatsObserver;)V
	 [ android.permission.GET_PACKAGE_SIZE ]

Lcom/android/server/pm/PackageManagerService.setLastChosenActivity(Landroid/content/Intent;Ljava/lang/String;ILandroid/content/IntentFilter;ILandroid/content/ComponentName;)V
	 [ android.permission.SET_PREFERRED_APPLICATIONS ]

Lcom/android/server/pm/PackageManagerService.setBlockUninstallForUser(Ljava/lang/String;ZI)Z
	 [   android.permission.DELETE_PACKAGES ]

Lcom/android/server/pm/PackageManagerService.queryIntentContentProviders(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
	 [ x4 = UserHandle.getUserId(Binder.getCallingUid()) AND X ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.queryIntentActivityOptions(Landroid/content/ComponentName;[Landroid/content/Intent;[Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
	 [ x7 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.queryIntentServices(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
	 [ x4 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.installPackage(Ljava/lang/String;Landroid/content/pm/IPackageInstallObserver2;ILjava/lang/String;Landroid/content/pm/VerificationParams;Ljava/lang/String;)V
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(UserHandle.getCallingUserId(),  $no_debugging_features$) AND !UserManager.hasUserRestriction(UserHandle.getCallingUserId(),  $no_install_apps$) AND x3 & 0x00000100 != 0 AND android.permission.GRANT_RUNTIME_PERMISSIONS ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(UserHandle.getCallingUserId(),  $no_debugging_features$) AND !UserManager.hasUserRestriction(UserHandle.getCallingUserId(),  $no_install_apps$) AND x3 & 0x00000100 = 0 ]

Lcom/android/server/pm/PackageManagerService.finishPackageInstall(I)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]

Lcom/android/server/pm/PackageManagerService.installPackageAsUser(Ljava/lang/String;Landroid/content/pm/IPackageInstallObserver2;ILjava/lang/String;Landroid/content/pm/VerificationParams;Ljava/lang/String;I)V
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x7,  $no_debugging_features$) AND x7 = UserHandle.getUserId(Binder.getCallingUid()) AND !UserManager.hasUserRestriction(x7,  $no_install_apps$) AND x3 & 0x00000100 != 0 AND android.permission.GRANT_RUNTIME_PERMISSIONS ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 2000 AND !UserManager.hasUserRestriction(x7,  $no_debugging_features$) AND android.permission.INTERACT_ACROSS_USERS_FULL AND !UserManager.hasUserRestriction(x7,  $no_install_apps$) AND x3 & 0x00000100 = 0 ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND !Binder.getCallingUid() = 2000 AND x7 = UserHandle.getUserId(Binder.getCallingUid()) AND !UserManager.hasUserRestriction(x7,  $no_install_apps$) AND x3 & 0x00000100 != 0 AND android.permission.GRANT_RUNTIME_PERMISSIONS ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND !Binder.getCallingUid() = 2000 AND android.permission.INTERACT_ACROSS_USERS_FULL AND !UserManager.hasUserRestriction(x7,  $no_install_apps$) AND x3 & 0x00000100 = 0 ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 1000 AND !UserManager.hasUserRestriction(x7,  $no_install_apps$) AND x3 & 0x00000100 != 0 AND android.permission.GRANT_RUNTIME_PERMISSIONS ]
	 OR
	 [ android.permission.INSTALL_PACKAGES AND Binder.getCallingUid() = 0 AND !UserManager.hasUserRestriction(x7,  $no_install_apps$) AND x3 & 0x00000100 = 0 ]

Lcom/android/server/pm/PackageManagerService.getPackageUid(Ljava/lang/String;I)I
	 [ x2 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.queryIntentActivities(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
	 [ x4 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.queryIntentReceivers(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
	 [ x4 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.getPackageGids(Ljava/lang/String;I)[I
	 [ x2 = UserHandle.getUserId(Binder.getCallingUid()) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.INTERACT_ACROSS_USERS ]

Lcom/android/server/pm/PackageManagerService.performBootDexOpt()V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]

Lcom/android/server/pm/UserManagerService.createProfileForUser(Ljava/lang/String;II)Landroid/content/pm/UserInfo;
	 [ Binder.getCallingUid() = 1000 AND !UserManager.getUserRestrictions($no_add_user$) ]
	 OR
	 [ Binder.getCallingUid() = 0 AND !UserManager.getUserRestrictions($no_add_user$) ]
	 OR
	 [ android.permission.MANAGE_USERS AND !UserManager.getUserRestrictions($no_add_user$) ]

Lcom/android/server/pm/UserManagerService.markGuestForDeletion(I)Z
	 [ Binder.getCallingUid() = 1000 AND !UserManager.getUserRestrictions($no_remove_user$) ]
	 OR
	 [ Binder.getCallingUid() = 0 AND !UserManager.getUserRestrictions($no_remove_user$) ]
	 OR
	 [ android.permission.MANAGE_USERS AND !UserManager.getUserRestrictions($no_remove_user$) ]

Lcom/android/server/pm/UserManagerService.getProfileParent(I)Landroid/content/pm/UserInfo;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.getDefaultGuestRestrictions()Landroid/os/Bundle;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setUserIcon(ILandroid/graphics/Bitmap;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.removeUser(I)Z
	 [ Binder.getCallingUid() = 1000 AND !UserManager.getUserRestrictions($no_remove_user$) ]
	 OR
	 [ Binder.getCallingUid() = 0 AND !UserManager.getUserRestrictions($no_remove_user$) ]
	 OR
	 [ android.permission.MANAGE_USERS AND !UserManager.getUserRestrictions($no_remove_user$) ]

Lcom/android/server/pm/UserManagerService.createUser(Ljava/lang/String;I)Landroid/content/pm/UserInfo;
	 [ Binder.getCallingUid() = 1000 AND !UserManager.getUserRestrictions($no_add_user$) ]
	 OR
	 [ Binder.getCallingUid() = 0 AND !UserManager.getUserRestrictions($no_add_user$) ]
	 OR
	 [ android.permission.MANAGE_USERS AND !UserManager.getUserRestrictions($no_add_user$) ]

Lcom/android/server/pm/UserManagerService.getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;
	 [ UserHandle.isSameApp(Binder.getCallingUid(), PackageManager.getApplicationInfo(x1).uid) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V
	 [ UserHandle.getCallingUserId() = x3 AND UserHandle.isSameApp(Binder.getCallingUid(), PackageManager.getApplicationInfo(x1).uid) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.getUsers(Z)Ljava/util/List;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setUserName(ILjava/lang/String;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.getProfiles(IZ)Ljava/util/List;
	 [ UserHandle.getCallingUserId() = x1 ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.getCredentialOwnerProfile(I)I
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setDefaultGuestRestrictions(Landroid/os/Bundle;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setUserEnabled(I)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setUserRestriction(Ljava/lang/String;ZI)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;
	 [ UserHandle.getCallingUserId() = x2 AND UserHandle.isSameApp(Binder.getCallingUid(), PackageManager.getApplicationInfo(x1).uid) ]
	 OR
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.getUserIcon(I)Landroid/os/ParcelFileDescriptor;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.getUserInfo(I)Landroid/content/pm/UserInfo;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.canAddMoreManagedProfiles()Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.removeRestrictions()V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setUserRestrictions(Landroid/os/Bundle;I)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]
	 OR
	 [ android.permission.MANAGE_USERS ]

Lcom/android/server/pm/UserManagerService.setSystemControlledUserRestriction(Ljava/lang/String;ZI)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 0 ]

Lcom/android/server/power/PowerManagerService$BinderService.powerHint(II)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.goToSleep(JII)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.setPowerSaveMode(Z)Z
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.updateWakeLockWorkSource(Landroid/os/IBinder;Landroid/os/WorkSource;Ljava/lang/String;)V
	 [   android.permission.WAKE_LOCK AND   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/power/PowerManagerService$BinderService.releaseWakeLock(Landroid/os/IBinder;I)V
	 [   android.permission.WAKE_LOCK ]

Lcom/android/server/power/PowerManagerService$BinderService.setTemporaryScreenBrightnessSettingOverride(I)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.wakeUp(JLjava/lang/String;Ljava/lang/String;)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(F)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.boostScreenBrightness(J)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.nap(J)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.reboot(ZLjava/lang/String;Z)V
	 [ android.permission.REBOOT AND x2 = $recovery$ AND android.permission.RECOVERY ]
	 OR
	 [ android.permission.REBOOT AND x2 != $recovery$ ]

Lcom/android/server/power/PowerManagerService$BinderService.acquireWakeLockWithUid(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;I)V
	 [   android.permission.WAKE_LOCK AND x2 & 0x00000040 != 0 AND   android.permission.DEVICE_POWER ]
	 OR
	 [   android.permission.WAKE_LOCK AND !(x2 & 0x00000040 != 0) ]

Lcom/android/server/power/PowerManagerService$BinderService.updateWakeLockUids(Landroid/os/IBinder;[I)V
	 [   android.permission.WAKE_LOCK ]

Lcom/android/server/power/PowerManagerService$BinderService.userActivity(JII)V
	 [  android.permission.DEVICE_POWER ]
	 OR
	 [ android.permission.USER_ACTIVITY ]

Lcom/android/server/power/PowerManagerService$BinderService.crash(Ljava/lang/String;)V
	 [   android.permission.REBOOT ]

Lcom/android/server/power/PowerManagerService$BinderService.acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)V
	 [   android.permission.WAKE_LOCK AND x2 & 0x00000040 != 0 AND   android.permission.DEVICE_POWER ]
	 OR
	 [   android.permission.WAKE_LOCK AND !(x2 & 0x00000040 != 0) AND   android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/power/PowerManagerService$BinderService.setAttentionLight(ZI)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/power/PowerManagerService$BinderService.shutdown(ZZ)V
	 [   android.permission.REBOOT ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.stopPrinterDiscovery(Landroid/print/IPrinterDiscoveryObserver;I)V
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.print(Ljava/lang/String;Landroid/print/IPrintDocumentAdapter;Landroid/print/PrintAttributes;Ljava/lang/String;II)Landroid/os/Bundle;
	 [ x6 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.restartPrintJob(Landroid/print/PrintJobId;II)V
	 [ x3 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.addPrintJobStateChangeListener(Landroid/print/IPrintJobStateChangeListener;II)V
	 [ x3 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.getPrintJobInfo(Landroid/print/PrintJobId;II)Landroid/print/PrintJobInfo;
	 [ x3 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.startPrinterStateTracking(Landroid/print/PrinterId;I)V
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.destroyPrinterDiscoverySession(Landroid/print/IPrinterDiscoveryObserver;I)V
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.startPrinterDiscovery(Landroid/print/IPrinterDiscoveryObserver;Ljava/util/List;I)V
	 [ x3 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.createPrinterDiscoverySession(Landroid/print/IPrinterDiscoveryObserver;I)V
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.stopPrinterStateTracking(Landroid/print/PrinterId;I)V
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.removePrintJobStateChangeListener(Landroid/print/IPrintJobStateChangeListener;I)V
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.validatePrinters(Ljava/util/List;I)V
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.cancelPrintJob(Landroid/print/PrintJobId;II)V
	 [ x3 = ActivityManager.getCurrentUser() ]

Lcom/android/server/print/PrintManagerService$PrintManagerImpl.getPrintJobInfos(II)Ljava/util/List;
	 [ x2 = ActivityManager.getCurrentUser() ]

Lcom/android/server/restrictions/RestrictionsManagerService$RestrictionsManagerImpl.getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;
	 [ UserHandle.isSameApp(Binder.getCallingUid(), PackageManager.getApplicationInfo(x1).uid) ]
	 OR
	 [ UserHandle.isSameApp(Binder.getCallingUid(), 1000) ]
	 OR
	 [ Binder.getCallingUid() = 0 ]

Lcom/android/server/restrictions/RestrictionsManagerService$RestrictionsManagerImpl.requestPermission(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/PersistableBundle;)V
	 [ PackageManager().getPackagesForUid(Binder.getCallingUid())[] = x1 ]

Lcom/android/server/sip/SipService.close(Ljava/lang/String;Ljava/lang/String;)V
	 [ android.permission.USE_SIP AND Binder.getCallingUid() = 1001 ]
	 OR
	 [ android.permission.USE_SIP AND mSipGroups.get(x1).getLocalProfile().getCallingUid() = Binder.getCallingUid() ]

Lcom/android/server/sip/SipService.createSession(Landroid/net/sip/SipProfile;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)Landroid/net/sip/ISipSession;
	 [ android.permission.USE_SIP ]

Lcom/android/server/sip/SipService.getListOfProfiles(Ljava/lang/String;)[Landroid/net/sip/SipProfile;
	 [ android.permission.USE_SIP AND Binder.getCallingUid() = 1001 ]
	 OR
	 [ android.permission.USE_SIP AND mSipGroups.values()[].getLocalProfile().getCallingUid() = Binder.getCallingUid() ]

Lcom/android/server/sip/SipService.getPendingSession(Ljava/lang/String;Ljava/lang/String;)Landroid/net/sip/ISipSession;
	 [ android.permission.USE_SIP ]

Lcom/android/server/sip/SipService.isOpened(Ljava/lang/String;Ljava/lang/String;)Z
	 [ android.permission.USE_SIP AND Binder.getCallingUid() = 1001 ]
	 OR
	 [ android.permission.USE_SIP AND mSipGroups.get(x1).getLocalProfile().getCallingUid() = Binder.getCallingUid() ]

Lcom/android/server/sip/SipService.isRegistered(Ljava/lang/String;Ljava/lang/String;)Z
	 [ android.permission.USE_SIP AND Binder.getCallingUid() = 1001 ]
	 OR
	 [ android.permission.USE_SIP AND mSipGroups.get(x1).getLocalProfile().getCallingUid() = Binder.getCallingUid() ]

Lcom/android/server/sip/SipService.open(Landroid/net/sip/SipProfile;Ljava/lang/String;)V
	 [ android.permission.USE_SIP ]

Lcom/android/server/sip/SipService.open3(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)V
	 [ android.permission.USE_SIP ]

Lcom/android/server/sip/SipService.setRegistrationListener(Ljava/lang/String;Landroid/net/sip/ISipSessionListener;Ljava/lang/String;)V
	 [ android.permission.USE_SIP AND mSipGroups.get(x1).getLocalProfile().getCallingUid() = Binder.getCallingUid() ]

Lcom/android/server/statusbar/StatusBarManagerService.collapsePanels()V
	 [   android.permission.EXPAND_STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.onPanelHidden()V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.setIconVisibility(Ljava/lang/String;Z)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.onPanelRevealed(ZI)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.expandNotificationsPanel()V
	 [   android.permission.EXPAND_STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.disable2(ILandroid/os/IBinder;Ljava/lang/String;)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.onNotificationActionClick(Ljava/lang/String;I)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.removeIcon(Ljava/lang/String;)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.setImeWindowStatus(Landroid/os/IBinder;IIZ)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.disable(ILandroid/os/IBinder;Ljava/lang/String;)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.onNotificationClick(Ljava/lang/String;)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.onNotificationClear(Ljava/lang/String;Ljava/lang/String;II)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.disable2ForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.setSystemUiVisibility(IILjava/lang/String;)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.clearNotificationEffects()V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.onNotificationExpansionChanged(Ljava/lang/String;ZZ)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.onClearAllNotifications(I)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;Lcom/android/internal/statusbar/StatusBarIconList;[ILjava/util/List;)V
	 [   android.permission.STATUS_BAR_SERVICE ]

Lcom/android/server/statusbar/StatusBarManagerService.topAppWindowChanged(Z)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/statusbar/StatusBarManagerService.expandSettingsPanel()V
	 [   android.permission.EXPAND_STATUS_BAR ]

Lcom/android/server/trust/TrustManagerService$1.registerTrustListener(Landroid/app/trust/ITrustListener;)V
	 [ android.permission.TRUST_LISTENER ]

Lcom/android/server/trust/TrustManagerService$1.reportEnabledTrustAgentsChanged(I)V
	 [ android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/trust/TrustManagerService$1.reportUnlockAttempt(ZI)V
	 [ android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/trust/TrustManagerService$1.reportKeyguardShowingChanged()V
	 [ android.permission.ACCESS_KEYGUARD_SECURE_STORAGE ]

Lcom/android/server/tv/TvInputManagerService$BinderService.getHardwareList()Ljava/util/List;
	 [   android.permission.TV_INPUT_HARDWARE ]

Lcom/android/server/tv/TvInputManagerService$BinderService.getDvbDeviceList()Ljava/util/List;
	 [   android.permission.DVB_DEVICE ]

Lcom/android/server/tv/TvInputManagerService$BinderService.acquireTvInputHardware(ILandroid/media/tv/ITvInputHardwareCallback;Landroid/media/tv/TvInputInfo;I)Landroid/media/tv/ITvInputHardware;
	 [   android.permission.TV_INPUT_HARDWARE ]

Lcom/android/server/tv/TvInputManagerService$BinderService.captureFrame(Ljava/lang/String;Landroid/view/Surface;Landroid/media/tv/TvStreamConfig;I)Z
	 [   android.permission.CAPTURE_TV_INPUT ]

Lcom/android/server/tv/TvInputManagerService$BinderService.getAvailableTvStreamConfigList(Ljava/lang/String;I)Ljava/util/List;
	 [   android.permission.CAPTURE_TV_INPUT ]

Lcom/android/server/tv/TvInputManagerService$BinderService.addBlockedRating(Ljava/lang/String;I)V
	 [   android.permission.MODIFY_PARENTAL_CONTROLS ]

Lcom/android/server/tv/TvInputManagerService$BinderService.releaseTvInputHardware(ILandroid/media/tv/ITvInputHardware;I)V
	 [   android.permission.TV_INPUT_HARDWARE ]

Lcom/android/server/tv/TvInputManagerService$BinderService.setParentalControlsEnabled(ZI)V
	 [   android.permission.MODIFY_PARENTAL_CONTROLS ]

Lcom/android/server/tv/TvInputManagerService$BinderService.removeBlockedRating(Ljava/lang/String;I)V
	 [   android.permission.MODIFY_PARENTAL_CONTROLS ]

Lcom/android/server/tv/TvInputManagerService$BinderService.openDvbDevice(Landroid/media/tv/DvbDeviceInfo;I)Landroid/os/ParcelFileDescriptor;
	 [   android.permission.DVB_DEVICE ]

Lcom/android/server/tv/TvInputManagerService$ServiceCallback.addHardwareTvInput(ILandroid/media/tv/TvInputInfo;)V
	 [   android.permission.TV_INPUT_HARDWARE ]

Lcom/android/server/tv/TvInputManagerService$ServiceCallback.addHdmiTvInput(ILandroid/media/tv/TvInputInfo;)V
	 [   android.permission.TV_INPUT_HARDWARE ]

Lcom/android/server/tv/TvInputManagerService$ServiceCallback.removeTvInput(Ljava/lang/String;)V
	 [   android.permission.TV_INPUT_HARDWARE ]

Lcom/android/server/usage/UsageStatsService$BinderService.setAppInactive(Ljava/lang/String;ZI)V
	 [ android.permission.CHANGE_APP_IDLE_STATE ]

Lcom/android/server/usage/UsageStatsService$BinderService.queryConfigurationStats(IJJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.PACKAGE_USAGE_STATS ]

Lcom/android/server/usage/UsageStatsService$BinderService.queryUsageStats(IJJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.PACKAGE_USAGE_STATS ]

Lcom/android/server/usage/UsageStatsService$BinderService.whitelistAppTemporarily(Ljava/lang/String;JI)V
	 [ android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST ]

Lcom/android/server/usage/UsageStatsService$BinderService.queryEvents(JJLjava/lang/String;)Landroid/app/usage/UsageEvents;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ android.permission.PACKAGE_USAGE_STATS ]

Lcom/android/server/usb/UsbService.requestDevicePermission(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;Landroid/app/PendingIntent;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ uidList.get(Binder.getCallingUid()) ]
	 OR
	 [ PackageManager.getApplicationInfo(x2).uid = Binder.getCallingUid() ]

Lcom/android/server/usb/UsbService.allowUsbDebugging(ZLjava/lang/String;)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.grantDevicePermission(Landroid/hardware/usb/UsbDevice;I)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.openAccessory(Landroid/hardware/usb/UsbAccessory;)Landroid/os/ParcelFileDescriptor;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ uidList.get(Binder.getCallingUid()) ]

Lcom/android/server/usb/UsbService.requestAccessoryPermission(Landroid/hardware/usb/UsbAccessory;Ljava/lang/String;Landroid/app/PendingIntent;)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ uidList.get(Binder.getCallingUid()) ]
	 OR
	 [ PackageManager.getApplicationInfo(x2).uid = Binder.getCallingUid() ]

Lcom/android/server/usb/UsbService.clearUsbDebuggingKeys()V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.isFunctionEnabled(Ljava/lang/String;)Z
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.setCurrentFunction(Ljava/lang/String;)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.grantAccessoryPermission(Landroid/hardware/usb/UsbAccessory;I)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.setPortRoles(Ljava/lang/String;II)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.setDevicePackage(Landroid/hardware/usb/UsbDevice;Ljava/lang/String;I)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.getPortStatus(Ljava/lang/String;)Landroid/hardware/usb/UsbPortStatus;
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.clearDefaults(Ljava/lang/String;I)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.getPorts()[Landroid/hardware/usb/UsbPort;
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.openDevice(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ uidList.get(Binder.getCallingUid()) ]

Lcom/android/server/usb/UsbService.hasDevicePermission(Landroid/hardware/usb/UsbDevice;)Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ uidList.get(Binder.getCallingUid()) ]

Lcom/android/server/usb/UsbService.setAccessoryPackage(Landroid/hardware/usb/UsbAccessory;Ljava/lang/String;I)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.setUsbDataUnlocked(Z)V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.denyUsbDebugging()V
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.hasDefaults(Ljava/lang/String;I)Z
	 [ android.permission.MANAGE_USB ]

Lcom/android/server/usb/UsbService.hasAccessoryPermission(Landroid/hardware/usb/UsbAccessory;)Z
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ uidList.get(Binder.getCallingUid()) ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.activeServiceSupportsAssist()Z
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.showSessionForActiveService(Landroid/os/Bundle;ILcom/android/internal/app/IVoiceInteractionSessionShowCallback;Landroid/os/IBinder;)Z
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.activeServiceSupportsLaunchFromKeyguard()Z
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.hideCurrentSession()V
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.onLockscreenShown()V
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.launchVoiceAssistFromKeyguard()V
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getKeyphraseSoundModel(ILjava/lang/String;)Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;
	 [ android.permission.MANAGE_VOICE_KEYPHRASES ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.deleteKeyphraseSoundModel(ILjava/lang/String;)I
	 [ android.permission.MANAGE_VOICE_KEYPHRASES ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.isSessionRunning()Z
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.getActiveServiceComponentName()Landroid/content/ComponentName;
	 [ android.permission.ACCESS_VOICE_INTERACTION_SERVICE ]

Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub.updateKeyphraseSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;)I
	 [ android.permission.MANAGE_VOICE_KEYPHRASES ]

Lcom/android/server/wallpaper/WallpaperManagerService.setWallpaperComponent(Landroid/content/ComponentName;)V
	 [   android.permission.SET_WALLPAPER_COMPONENT ]

Lcom/android/server/wallpaper/WallpaperManagerService.setDimensionHints(IILjava/lang/String;)V
	 [   android.permission.SET_WALLPAPER_HINTS AND mCurrentUserId = UserHandle.getCallingUserId() ]

Lcom/android/server/wallpaper/WallpaperManagerService.setWallpaperComponentChecked(Landroid/content/ComponentName;Ljava/lang/String;)V
	 [   android.permission.SET_WALLPAPER_COMPONENT ]

Lcom/android/server/wallpaper/WallpaperManagerService.setDisplayPadding(Landroid/graphics/Rect;Ljava/lang/String;)V
	 [   android.permission.SET_WALLPAPER_HINTS AND mCurrentUserId = UserHandle.getCallingUserId() ]

Lcom/android/server/wallpaper/WallpaperManagerService.clearWallpaper(Ljava/lang/String;)V
	 [   android.permission.SET_WALLPAPER ]

Lcom/android/server/wallpaper/WallpaperManagerService.setWallpaper(Ljava/lang/String;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
	 [   android.permission.SET_WALLPAPER ]

Lcom/android/server/wallpaper/WallpaperManagerService.getWallpaper(Landroid/app/IWallpaperManagerCallback;Landroid/os/Bundle;)Landroid/os/ParcelFileDescriptor;
	 [ Binder.getCallingUid() = 1000 ]

Lcom/android/server/webkit/WebViewUpdateService$BinderService.waitForRelroCreationCompleted(Z)V
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/webkit/WebViewUpdateService$BinderService.notifyRelroCreationCompleted(ZZ)V
	 [ Binder.getCallingUid() = 1000 ]
	 OR
	 [ Binder.getCallingUid() = 1037 ]

Lcom/android/server/wifi/WifiServiceImpl.enableAggressiveHandover(I)V
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.enableAutoJoinWhenAssociated(Z)Z
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getWpsNfcConfigurationToken(I)Ljava/lang/String;
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/wifi/WifiServiceImpl.saveConfiguration()Z
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getScanResults(Ljava/lang/String;)Ljava/util/List;
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.PEERS_MAC_ADDRESS AND ActivityManager.getCurrentUser() = UserHandle.getCallingUserId() ]
	 OR
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.PEERS_MAC_ADDRESS AND android.permission.INTERACT_ACROSS_USERS_FULL ]
	 OR
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.SCORE_NETWORKS AND ActivityManager.getCurrentUser() = UserHandle.getCallingUserId() ]
	 OR
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.SCORE_NETWORKS AND android.permission.INTERACT_ACROSS_USERS_FULL ]

Lcom/android/server/wifi/WifiServiceImpl.getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getAllowScansWithTraffic()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getConfigFile()Ljava/lang/String;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getWifiServiceMessenger()Landroid/os/Messenger;
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getFrequencyBand()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getPrivilegedConfiguredNetworks()Ljava/util/List;
	 [ android.permission.READ_WIFI_CREDENTIAL AND android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.factoryReset()V
	 [ android.permission.CONNECTIVITY_INTERNAL AND !UserManager.hasUserRestriction($no_network_reset$) AND !UserManager.hasUserRestriction($no_config_wifi$) AND android.permission.CHANGE_WIFI_STATE AND android.permission.ACCESS_WIFI_STATE AND UserHandle.getUserId(Binder.getCallingUid()) = 0 ]
	 OR
	 [ !UserManager.hasUserRestriction($no_network_reset$) AND !UserManager.hasUserRestriction($no_config_tethering$) AND android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getWifiEnabledState()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.updateWifiLockWorkSource(Landroid/os/IBinder;Landroid/os/WorkSource;)V
	 [ x2 != 0 AND Binder.getCallingUid() = Process.getUid() ]
	 OR
	 [ x2 != 0 AND android.permission.UPDATE_DEVICE_STATS ]

Lcom/android/server/wifi/WifiServiceImpl.getSupportedFeatures()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z
	 [ android.permission.WAKE_LOCK AND x2 != 0 AND Binder.getCallingUid() = Process.getUid() ]
	 OR
	 [ android.permission.WAKE_LOCK AND x2 != 0 AND android.permission.UPDATE_DEVICE_STATS ]
	 OR
	 [ android.permission.WAKE_LOCK AND x2 = 0 ]

Lcom/android/server/wifi/WifiServiceImpl.addOrUpdateNetwork(Landroid/net/wifi/WifiConfiguration;)I
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.pingSupplicant()Z
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.enableVerboseLogging(I)V
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getWifiApEnabledState()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.disableEphemeralNetwork(Ljava/lang/String;)V
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.addToBlacklist(Ljava/lang/String;)V
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.clearBlacklist()V
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.setHalBasedAutojoinOffload(I)V
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/wifi/WifiServiceImpl.getChannelList()Ljava/util/List;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.isScanAlwaysAvailable()Z
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getEnableAutoJoinWhenAssociated()Z
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getVerboseLoggingLevel()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.setFrequencyBand(IZ)V
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.startWifi()V
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/wifi/WifiServiceImpl.releaseWifiLock(Landroid/os/IBinder;)Z
	 [ android.permission.WAKE_LOCK ]

Lcom/android/server/wifi/WifiServiceImpl.getCurrentNetwork()Landroid/net/Network;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.initializeMulticastFiltering()V
	 [ android.permission.CHANGE_WIFI_MULTICAST_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getCountryCode()Ljava/lang/String;
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/wifi/WifiServiceImpl.disableNetwork(I)Z
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.startScan(Landroid/net/wifi/ScanSettings;Landroid/os/WorkSource;)V
	 [ android.permission.CHANGE_WIFI_STATE AND x2 != 0 AND android.permission.UPDATE_DEVICE_STATS ]
	 OR
	 [ android.permission.CHANGE_WIFI_STATE AND x2 = 0 ]

Lcom/android/server/wifi/WifiServiceImpl.getDhcpInfo()Landroid/net/DhcpInfo;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getMatchingWifiConfig(Landroid/net/wifi/ScanResult;)Landroid/net/wifi/WifiConfiguration;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.reconnect()V
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getConnectionInfo()Landroid/net/wifi/WifiInfo;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.setCountryCode(Ljava/lang/String;Z)V
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/wifi/WifiServiceImpl.setWifiEnabled(Z)Z
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.startLocationRestrictedScan(Landroid/os/WorkSource;)V
	 [ android.permission.CHANGE_WIFI_STATE AND android.permission.LOCATION_HARDWARE AND android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getAggressiveHandover()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getConfiguredNetworks()Ljava/util/List;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.setAllowScansWithTraffic(I)V
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V
	 [ android.permission.CHANGE_WIFI_MULTICAST_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.getHalBasedAutojoinOffload()I
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.isMulticastEnabled()Z
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.enableNetwork(IZ)Z
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.reassociate()V
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.disconnect()V
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.removeNetwork(I)Z
	 [ android.permission.CHANGE_WIFI_STATE AND UserHandle.getUserId(Binder.getCallingUid()) = 0 ]

Lcom/android/server/wifi/WifiServiceImpl.setWifiApConfiguration(Landroid/net/wifi/WifiConfiguration;)V
	 [ android.permission.CHANGE_WIFI_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)V
	 [ android.permission.CHANGE_WIFI_STATE AND android.permission.CONNECTIVITY_INTERNAL AND !UserManager.hasUserRestriction($no_config_tethering$) ]

Lcom/android/server/wifi/WifiServiceImpl.releaseMulticastLock()V
	 [ android.permission.CHANGE_WIFI_MULTICAST_STATE ]

Lcom/android/server/wifi/WifiServiceImpl.stopWifi()V
	 [ android.permission.CONNECTIVITY_INTERNAL ]

Lcom/android/server/wifi/WifiServiceImpl.getConnectionStatistics()Landroid/net/wifi/WifiConnectionStatistics;
	 [ android.permission.ACCESS_WIFI_STATE AND android.permission.READ_WIFI_CREDENTIAL ]

Lcom/android/server/wifi/WifiServiceImpl.reportActivityInfo()Landroid/net/wifi/WifiActivityEnergyInfo;
	 [ android.permission.ACCESS_WIFI_STATE ]

Lcom/android/server/wm/WindowManagerService.statusBarVisibilityChanged(I)V
	 [   android.permission.STATUS_BAR ]

Lcom/android/server/wm/WindowManagerService.resumeKeyDispatching(Landroid/os/IBinder;)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.setAppOrientation(Landroid/view/IApplicationToken;I)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.stopAppFreezingScreen(Landroid/os/IBinder;Z)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.stopViewServer()Z
	 [   android.permission.DUMP ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
	 [   android.permission.DISABLE_KEYGUARD AND mPolicy.isKeyguardSecure() AND Binder.getCallingUid() = 1000 ]
	 OR
	 [   android.permission.DISABLE_KEYGUARD AND !mPolicy.isKeyguardSecure() ]

Lcom/android/server/wm/WindowManagerService.reenableKeyguard(Landroid/os/IBinder;)V
	 [   android.permission.DISABLE_KEYGUARD ]

Lcom/android/server/wm/WindowManagerService.dismissKeyguard()V
	 [   android.permission.DISABLE_KEYGUARD ]

Lcom/android/server/wm/WindowManagerService.startViewServer(I)Z
	 [   android.permission.DUMP ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.lockNow(Landroid/os/Bundle;)V
	 [   android.permission.DEVICE_POWER ]

Lcom/android/server/wm/WindowManagerService.prepareAppTransition(IZ)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.startAppFreezingScreen(Landroid/os/IBinder;I)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.setFocusedApp(Landroid/os/IBinder;Z)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.setAppVisibility(Landroid/os/IBinder;Z)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.executeAppTransition()V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.MANAGE_APP_TOKENS ]

Lcom/android/server/wm/WindowManagerService.setEventDispatching(Z)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.freezeRotation(I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.SET_ORIENTATION ]

Lcom/android/server/wm/WindowManagerService.pauseKeyDispatching(Landroid/os/IBinder;)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.requestAssistScreenshot(Lcom/android/internal/app/IAssistScreenshotReceiver;)Z
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.FRAME_STATS ]

Lcom/android/server/wm/WindowManagerService.removeWindowToken(Landroid/os/IBinder;)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.setOverscan(IIIII)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/wm/WindowManagerService.thawRotation()V
	 [   android.permission.SET_ORIENTATION ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.setForcedDisplayDensity(II)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/wm/WindowManagerService.updateOrientationFromAppTokens(Landroid/content/res/Configuration;Landroid/os/IBinder;)Landroid/content/res/Configuration;
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.clearWindowContentFrameStats(Landroid/os/IBinder;)Z
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.FRAME_STATS ]

Lcom/android/server/wm/WindowManagerService.setForcedDisplaySize(III)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/wm/WindowManagerService.clearForcedDisplayDensity(I)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/wm/WindowManagerService.setForcedDisplayScalingMode(II)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/wm/WindowManagerService.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
	 [   android.permission.DISABLE_KEYGUARD ]

Lcom/android/server/wm/WindowManagerService.getWindowContentFrameStats(Landroid/os/IBinder;)Landroid/view/WindowContentFrameStats;
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.FRAME_STATS ]

Lcom/android/server/wm/WindowManagerService.addWindowToken(Landroid/os/IBinder;I)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.MANAGE_APP_TOKENS ]

Lcom/android/server/wm/WindowManagerService.clearForcedDisplaySize(I)V
	 [   android.permission.WRITE_SECURE_SETTINGS ]

Lcom/android/server/wm/WindowManagerService.setAnimationScales([F)V
	 [   android.permission.SET_ANIMATION_SCALE ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.removeAppToken(Landroid/os/IBinder;)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.startFreezingScreen(II)V
	 [   android.permission.FREEZE_SCREEN ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.isViewServerRunning()Z
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.DUMP ]

Lcom/android/server/wm/WindowManagerService.setAnimationScale(IF)V
	 [   android.permission.SET_ANIMATION_SCALE ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.stopFreezingScreen()V
	 [   android.permission.FREEZE_SCREEN ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.addAppToken(ILandroid/view/IApplicationToken;IIIZZIIZZ)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.MANAGE_APP_TOKENS ]

Lcom/android/server/wm/WindowManagerService.keyguardGoingAway(ZZ)V
	 [   android.permission.DISABLE_KEYGUARD ]

Lcom/android/server/wm/WindowManagerService.screenshotApplications(Landroid/os/IBinder;III)Landroid/graphics/Bitmap;
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.FRAME_STATS ]

Lcom/android/server/wm/WindowManagerService.setAppTask(Landroid/os/IBinder;I)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.setNewConfiguration(Landroid/content/res/Configuration;)V
	 [ Binder.getCallingPid() = Process.myPid() ]
	 OR
	 [   android.permission.MANAGE_APP_TOKENS ]

Lcom/android/server/wm/WindowManagerService.setAppWillBeHidden(Landroid/os/IBinder;)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]

Lcom/android/server/wm/WindowManagerService.setAppStartingWindow(Landroid/os/IBinder;Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIIILandroid/os/IBinder;Z)V
	 [   android.permission.MANAGE_APP_TOKENS ]
	 OR
	 [ Binder.getCallingPid() = Process.myPid() ]
