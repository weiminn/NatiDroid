android.app.SystemServiceRegistry$CachedServiceFetcher: java.lang.Object getService(android.app.ContextImpl)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.app.UiAutomationConnection: android.graphics.Bitmap takeScreenshot(int,int)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
android.hardware.ICameraService$Stub$Proxy: android.hardware.ICamera connect(android.hardware.ICameraClient,int,java.lang.String,int,int)  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
android.hardware.ICameraService$Stub$Proxy: android.hardware.ICamera connectLegacy(android.hardware.ICameraClient,int,int,java.lang.String,int)  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
android.hardware.ICameraService$Stub$Proxy: android.hardware.camera2.ICameraDeviceUser connectDevice(android.hardware.camera2.ICameraDeviceCallbacks,java.lang.String,java.lang.String,int)  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
android.hardware.ICameraService$Stub$Proxy: java.lang.String getLegacyParameters(int)  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
android.hardware.SensorManager: boolean setOperationParameter(android.hardware.SensorAdditionalInfo)  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
android.hardware.SystemSensorManager: boolean setOperationParameterImpl(android.hardware.SensorAdditionalInfo)  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
android.hardware.SystemSensorManager: int nativeSetOperationParameter(long,int,int,float[],int[])  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
android.hardware.camera2.CameraManager: android.hardware.camera2.CameraDevice openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler,int)  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
android.hardware.camera2.CameraManager: void openCameraForUid(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler,int)  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler,java.lang.String)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.hardware.display.DisplayManager: void connectWifiDisplay(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManager: void disconnectWifiDisplay()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManager: void forgetWifiDisplay(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManager: void startWifiDisplayScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManager: void stopWifiDisplayScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManagerGlobal: android.hardware.display.VirtualDisplay createVirtualDisplay(android.content.Context,android.media.projection.MediaProjection,java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler,java.lang.String)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.hardware.display.DisplayManagerGlobal: void connectWifiDisplay(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManagerGlobal: void disconnectWifiDisplay()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManagerGlobal: void forgetWifiDisplay(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManagerGlobal: void startWifiDisplayScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.display.DisplayManagerGlobal: void stopWifiDisplayScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTrigger: android.hardware.soundtrigger.SoundTriggerModule attachModule(int,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTrigger: int listModules(java.util.ArrayList)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTriggerModule$NativeEventHandlerDelegate: void <init>(android.hardware.soundtrigger.SoundTriggerModule,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTriggerModule: int loadSoundModel(android.hardware.soundtrigger.SoundTrigger$SoundModel,int[])  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTriggerModule: int startRecognition(int,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTriggerModule: int stopRecognition(int)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTriggerModule: int unloadSoundModel(int)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTriggerModule: void <init>(int,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.hardware.soundtrigger.SoundTriggerModule: void native_setup(java.lang.Object)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
android.media.AudioManager: boolean isStreamMute(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
android.media.AudioManager: int getLastAudibleStreamVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: int getStreamVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: int registerAudioPolicy(android.media.audiopolicy.AudioPolicy)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
android.media.AudioManager: int releaseAudioPatch(android.media.AudioPatch)  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
android.media.AudioManager: int setAudioPortGain(android.media.AudioPort,android.media.AudioGainConfig)  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: int setHdmiSystemAudioSupported(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void adjustStreamVolume(int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void disableSafeMediaVolume()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void forceVolumeControlStream(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void loadSoundEffects()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void reloadAudioSettings()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void setBluetoothScoOn(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioManager: void setMasterMute(boolean,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioManager: void setMicrophoneMute(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioManager: void setMode(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioManager: void setParameters(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioManager: void setRingerMode(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void setRingerModeInternal(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void setStreamMute(int,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void setStreamVolume(int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void setVolumeController(android.media.IVolumeController)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void startBluetoothSco()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void startBluetoothScoVirtualCall()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void stopBluetoothSco()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioManager: void unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
android.media.AudioPlaybackConfiguration$IPlayerShell: void binderDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioPlaybackConfiguration: void playerDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioRecord$Builder: android.media.AudioRecord build()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioRecord$NativeEventHandler: void handleMessage(android.os.Message)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord$NativeRoutingEventHandlerDelegate: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: int read(byte[],int,int)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: int read(byte[],int,int,int)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: int read(float[],int,int,int)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: int read(java.nio.ByteBuffer,int)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: int read(java.nio.ByteBuffer,int,int)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: int read(short[],int,int)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: int read(short[],int,int,int)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioRecord: void <init>(int,int,int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioRecord: void <init>(long)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener,android.os.Handler)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: void deferred_connect(long)  ::  [android.permission.RECORD_AUDIO]
android.media.AudioRecord: void finalize()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioRecord: void handleFullVolumeRec(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioRecord: void release()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: void startRecording()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: void startRecording(android.media.MediaSyncEvent)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM AND android.permission.RECORD_AUDIO]
android.media.AudioRecord: void stop()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.AudioSystem: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
android.media.AudioSystem: int handleDeviceConfigChange(int,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int initStreamVolume(int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int muteMicrophone(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
android.media.AudioSystem: int releaseAudioPatch(android.media.AudioPatch)  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
android.media.AudioSystem: int setAudioPortConfig(android.media.AudioPortConfig)  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int setForceUse(int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int setLowRamDevice(boolean)  ::  [uid == AID_SYSTEM]
android.media.AudioSystem: int setMasterMono(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int setMasterMute(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int setMasterVolume(float)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int setParameters(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int setPhoneState(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.AudioSystem: int setStreamVolumeIndex(int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.MediaDrm: byte[] signRSA(byte[],java.lang.String,byte[],byte[])  ::  [android.permission.ACCESS_DRM_CERTIFICATES AND PLATFORM_SIGNATURE]
android.media.MediaDrm: byte[] signRSANative(android.media.MediaDrm,byte[],java.lang.String,byte[],byte[])  ::  [android.permission.ACCESS_DRM_CERTIFICATES AND PLATFORM_SIGNATURE]
android.media.MediaPlayer$EventHandler: void handleMessage(android.os.Message)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void nativeSetDataSource(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[])  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void setDataSource(java.lang.String)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void setDataSource(java.lang.String,java.lang.String[],java.lang.String[],java.util.List)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map,java.util.List)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.MediaRecorder: void setAudioSource(int)  ::  [android.permission.RECORD_AUDIO]
android.media.MediaRecorder: void setVideoSource(int)  ::  [vs == VIDEO_SOURCE_SURFACE] OR [android.permission.CAMERA]
android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo,int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteGroup: void memberNameChanged(android.media.MediaRouter$RouteInfo,java.lang.CharSequence)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$RouteGroup: void memberStatusChanged(android.media.MediaRouter$RouteInfo,java.lang.CharSequence)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$RouteGroup: void memberVolumeChanged(android.media.MediaRouter$RouteInfo)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteGroup: void removeRoute(android.media.MediaRouter$RouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteGroup: void removeRoute(int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteGroup: void requestSetVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteGroup: void requestUpdateVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteGroup: void routeUpdated()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$RouteGroup: void updateVolume()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteInfo: int getVolume()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteInfo: void requestSetVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteInfo: void requestUpdateVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$RouteInfo: void select()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$RouteInfo: void setStatusInt(java.lang.CharSequence)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$RouteInfo: void setTag(java.lang.Object)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$Static: void rebindAsUser(int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$Static: void startMonitoringRoutes(android.content.Context)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$Static: void updateAudioRoutes(android.media.AudioRoutesInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$Static: void updateClientState()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$Static: void updateDiscoveryRequest()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$UserRouteInfo: void setStatus(java.lang.CharSequence)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter$UserRouteInfo: void setVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter$WifiDisplayStatusChangedReceiver: void onReceive(android.content.Context,android.content.Intent)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void <init>(android.content.Context)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback,int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void addRouteInt(android.media.MediaRouter$RouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void addRouteStatic(android.media.MediaRouter$RouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void addUserRoute(android.media.MediaRouter$UserRouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void clearUserRoutes()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void rebindAsUser(int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.MediaRouter: void removeCallback(android.media.MediaRouter$Callback)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void removeRouteInt(android.media.MediaRouter$RouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void removeRouteStatic(android.media.MediaRouter$RouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void removeUserRoute(android.media.MediaRouter$UserRouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void selectDefaultRouteStatic()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter$RouteInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void selectRouteInt(int,android.media.MediaRouter$RouteInfo,boolean)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void selectRouteStatic(int,android.media.MediaRouter$RouteInfo,boolean)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void updateWifiDisplayRoute(android.media.MediaRouter$RouteInfo,android.hardware.display.WifiDisplay,android.hardware.display.WifiDisplayStatus,boolean)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.MediaRouter: void updateWifiDisplayStatus(android.hardware.display.WifiDisplayStatus)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.PlayerBase: void basePause()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.PlayerBase: void baseRelease()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.PlayerBase: void baseStart()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.PlayerBase: void baseStop()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
android.media.RemoteDisplay: android.media.RemoteDisplay listen(java.lang.String,android.media.RemoteDisplay$Listener,android.os.Handler,java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.RemoteDisplay: long nativeListen(java.lang.String,java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.RemoteDisplay: void startListening(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
android.media.Ringtone: boolean playFallbackRingtone()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.Ringtone: void play()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.Ringtone: void setStreamType(int)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.Ringtone: void setUri(android.net.Uri)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.RingtoneManager: android.media.Ringtone getRingtone(int)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.media.audiopolicy.AudioPolicy: android.media.AudioRecord createAudioRecordSink(android.media.audiopolicy.AudioMix)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.media.projection.MediaProjection: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,boolean,android.view.Surface,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.media.projection.MediaProjection: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,int,android.view.Surface,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.os.Binder: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
android.os.BinderProxy: void sendDeathNotice(android.os.IBinder$DeathRecipient)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
android.view.SurfaceControl: android.graphics.Bitmap nativeScreenshot(android.os.IBinder,android.graphics.Rect,int,int,int,int,boolean,boolean,int)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,int,int,boolean,int)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.view.SurfaceControl: android.graphics.Bitmap screenshot(int,int)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.view.SurfaceControl: android.view.Display$HdrCapabilities getHdrCapabilities(android.os.IBinder)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.view.SurfaceControl: android.view.Display$HdrCapabilities nativeGetHdrCapabilities(android.os.IBinder)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
android.view.SurfaceControl: void nativeScreenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,int,int,boolean,boolean)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,int,int,boolean,boolean)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,int,int)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,int,int,int,int,boolean)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
android.widget.VideoView: void openVideo()  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.widget.VideoView: void resume()  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.widget.VideoView: void setVideoPath(java.lang.String)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.widget.VideoView: void setVideoURI(android.net.Uri)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
com.android.mediadrm.signer.MediaDrmSigner: signRSA(android.media.MediaDrm, byte[],  java.lang.String, byte[], byte[])  ::  [android.permission.ACCESS_DRM_CERTIFICATES AND PLATFORM_SIGNATURE]
com.android.server.SensorNotificationService: void onLocationChanged(android.location.Location)  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
com.android.server.audio.AudioService$AudioHandler: boolean onLoadSoundEffects()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void handleMessage(android.os.Message)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void onPersistSafeVolumeState(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void onPlaySoundEffect(int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void onUnloadSoundEffects()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void persistRingerMode(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void persistVolume(com.android.server.audio.AudioService$VolumeStreamState,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void setAllVolumes(com.android.server.audio.AudioService$VolumeStreamState)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void setDeviceVolume(com.android.server.audio.AudioService$VolumeStreamState,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioHandler: void setForceUse(int,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioPolicyProxy: void <init>(com.android.server.audio.AudioService,android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioPolicyProxy: void binderDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioPolicyProxy: void connectMixes()  ::  [android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE]
com.android.server.audio.AudioService$AudioPolicyProxy: void release()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceInternal: void adjustStreamVolumeForUid(int,int,int,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceInternal: void adjustSuggestedStreamVolumeForUid(int,int,int,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceInternal: void setAccessibilityServiceUids(android.util.IntArray)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceInternal: void setRingerModeDelegate(android.media.AudioManagerInternal$RingerModeDelegate)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceInternal: void setRingerModeInternal(int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceInternal: void setStreamVolumeForUid(int,int,int,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceInternal: void updateRingerModeAffectedStreamsInternal()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioServiceUserRestrictionsListener: void onUserRestrictionsChanged(int,android.os.Bundle,android.os.Bundle)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$AudioSystemThread: void run()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$ForceControlStreamClient: void binderDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$Lifecycle: void <init>(android.content.Context)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$MyDisplayStatusCallback: void onComplete(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void binderDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$ScoClient: int totalCount()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$ScoClient: void binderDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$ScoClient: void clearCount(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$ScoClient: void decCount()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$ScoClient: void incCount(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$ScoClient: void requestScoState(int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$SetModeDeathHandler: void binderDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$SettingsObserver: void <init>(com.android.server.audio.AudioService)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$SettingsObserver: void onChange(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$SettingsObserver: void updateEncodedSurroundOutput()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$SoundPoolCallback: void onLoadComplete(android.media.SoundPool,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$SoundPoolListenerThread: void run()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: boolean adjustIndex(int,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: boolean setIndex(int,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: int getValidIndex(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: int observeDevicesForStream_syncVSS(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void <init>(com.android.server.audio.AudioService,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void applyAllVolumes()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void applyDeviceVolume_syncVSS(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void checkFixedVolumeDevices()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void dump(java.io.PrintWriter)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void mute(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void readSettings()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService$VolumeStreamState: void setAllIndexes(com.android.server.audio.AudioService$VolumeStreamState,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: boolean handleDeviceConnection(boolean,int,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: boolean isStreamMute(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: boolean loadSoundEffects()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: com.android.server.audio.AudioService$ScoClient getScoClient(android.os.IBinder,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int checkForRingerModeChange(int,int,int,boolean,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int checkSendBecomingNoisyIntent(int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int getDeviceForStream(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int getDevicesForStream(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int getDevicesForStream(int,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int getLastAudibleStreamVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int getStreamVolume(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int setBluetoothA2dpDeviceConnectionStateInt(android.bluetooth.BluetoothDevice,int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int setHdmiSystemAudioSupported(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void <init>(android.content.Context)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void checkAllAliasStreamVolumes()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void checkAllFixedVolumeDevices()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void checkAllFixedVolumeDevices(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void checkMuteAffectedStreams()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void clearAllScoClients(int,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void createAudioSystemThread()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void createStreamStates()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void disableSafeMediaVolume(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void disconnectA2dp()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void disconnectA2dpSink()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void disconnectAllBluetoothProfiles()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void disconnectBluetoothSco(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void disconnectHeadset()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void dumpStreamStates(java.io.PrintWriter)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void enforceSafeMediaVolume(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void forceVolumeControlStream(int,android.os.IBinder)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void handleConfigurationChanged(android.content.Context)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void initA11yMonitoring()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void makeA2dpDeviceAvailable(java.lang.String,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void makeA2dpDeviceUnavailableLater(java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void makeA2dpDeviceUnavailableNow(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void makeA2dpSrcAvailable(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void makeA2dpSrcUnavailable(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void muteRingerModeStreams()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void observeDevicesForStreams(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onAccessoryPlugMediaUnmute(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onAudioServerDied()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onCheckMusicActive(java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onConfigureSafeVolume(boolean,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onSetA2dpSinkConnectionState(android.bluetooth.BluetoothDevice,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onSetA2dpSourceConnectionState(android.bluetooth.BluetoothDevice,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onSetStreamVolume(int,int,int,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onSetWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onSystemReady()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void onUnmuteStream(int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void playerEvent(int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void readAndSetLowRamDevice()  ::  [uid == AID_SYSTEM]
com.android.server.audio.AudioService: void readAudioSettings(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void readPersistedSettings()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void readUserRestrictions()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void releasePlayer(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void reloadAudioSettings()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void resetBluetoothSco()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setBluetoothA2dpOnInt(boolean,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setBluetoothScoOn(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setBluetoothScoOnInt(boolean,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setBtScoDeviceConnectionState(android.bluetooth.BluetoothDevice,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setForceUseInt_SyncDevices(int,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setMasterMute(boolean,int,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setMasterMuteInternal(boolean,int,java.lang.String,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setMasterMuteInternalNoCallerCheck(boolean,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setMicrophoneMute(boolean,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setMicrophoneMuteNoCallerCheck(boolean,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setMode(int,android.os.IBinder,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setOrientationForAudioSystem()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void setRingerMode(int,java.lang.String,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setRingerModeExternal(int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setRingerModeInt(int,boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setRingerModeInternal(int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setSafeMediaVolumeEnabled(boolean,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String,java.lang.String,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setStreamVolumeInt(int,int,int,boolean,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void startBluetoothScoInt(android.os.IBinder,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void stopBluetoothSco(android.os.IBinder)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void updateA11yVolumeAlias(boolean)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.AudioService: void updateMasterMono(android.content.ContentResolver)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.AudioService: void updateStreamVolumeAlias(boolean,java.lang.String)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.audio.PlaybackActivityMonitor: void checkVolumeForPrivilegedAlarm(android.media.AudioPlaybackConfiguration,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.PlaybackActivityMonitor: void playerDeath(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.PlaybackActivityMonitor: void playerEvent(int,int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.PlaybackActivityMonitor: void releasePlayer(int,int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.RotationHelper$AudioDisplayListener: void onDisplayChanged(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.RotationHelper: void enable()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.RotationHelper: void init(android.content.Context,android.os.Handler)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.RotationHelper: void publishRotation(int)  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.audio.RotationHelper: void updateOrientation()  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
com.android.server.display.ColorFade: boolean captureScreenshotTextureAndSetViewport()  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
com.android.server.display.ColorFade: boolean prepare(android.content.Context,int)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService$BinderService: void connectWifiDisplay(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService$BinderService: void disconnectWifiDisplay()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService$BinderService: void forgetWifiDisplay(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService$BinderService: void startWifiDisplayScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService$BinderService: void stopWifiDisplayScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService$DisplayAdapterListener: void onDisplayDeviceEvent(com.android.server.display.DisplayDevice,int)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService$DisplayManagerHandler: void handleMessage(android.os.Message)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_GRAPHICS] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: int createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int,java.lang.String)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: java.lang.Runnable updateDisplayStateLocked(com.android.server.display.DisplayDevice)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void applyGlobalDisplayStateLocked(java.util.List)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void connectWifiDisplayInternal(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService: void disconnectWifiDisplayInternal()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService: void forgetWifiDisplayInternal(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService: void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService: void registerAdditionalDisplayAdapters()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_GRAPHICS] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void registerDefaultDisplayAdapters()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_GRAPHICS] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_GRAPHICS] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void registerOverlayDisplayAdapterLocked()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_GRAPHICS] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void registerWifiDisplayAdapterLocked()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_GRAPHICS] OR [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE AND uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void requestGlobalDisplayStateInternal(int,int)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.DisplayManagerService: void startWifiDisplayScanInternal(int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService: void startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService: void stopWifiDisplayScanInternal(int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayManagerService: void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.DisplayPowerState$PhotonicModulator: void run()  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.LocalDisplayAdapter$HotplugDisplayEventReceiver: void onHotplug(long,int,boolean)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.lang.Runnable requestDisplayStateLocked(int,int)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void <init>(com.android.server.display.LocalDisplayAdapter,android.os.IBinder,int,android.view.SurfaceControl$PhysicalDisplayInfo[],int,int[],int)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.LocalDisplayAdapter: void registerLocked()  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.LocalDisplayAdapter: void tryConnectDisplayLocked(int)  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
com.android.server.display.WifiDisplayAdapter: void requestForgetLocked(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void advertiseDisplay(android.hardware.display.WifiDisplay,android.view.Surface,int,int,int)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void connect(android.net.wifi.p2p.WifiP2pDevice)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void disconnect()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void handleConnectionChanged(android.net.NetworkInfo)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void handleConnectionFailure(boolean)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void handlePeersChanged()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void handleScanFinished()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void handleScanResults()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void handleScanStarted()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void handleStateChanged(boolean)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void readvertiseDisplay(android.hardware.display.WifiDisplay)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void reportFeatureState()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void requestConnect(java.lang.String)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void requestDisconnect()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void requestPeers()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void requestStartScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void requestStopScan()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void retryConnection()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void stopPeerDiscovery()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void tryDiscoverPeers()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void unadvertiseDisplay()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void updateConnection()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void updateDesiredDevice(android.net.wifi.p2p.WifiP2pDevice)  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void updateScanState()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void updateSettings()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.display.WifiDisplayController: void updateWfdEnableState()  ::  [android.permission.CONTROL_WIFI_DISPLAY AND PLATFORM_SIGNATURE]
com.android.server.power.Notifier$NotifierHandler: void handleMessage(android.os.Message)  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.power.Notifier: void playWirelessChargingStartedSound()  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
com.android.server.soundtrigger.SoundTriggerHelper$MyCallStateListener: void onCallStateChanged(int,java.lang.String)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper$PowerSaveModeListener: void onReceive(android.content.Context,android.content.Intent)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int cleanUpExistingKeyphraseModelLocked(com.android.server.soundtrigger.SoundTriggerHelper$ModelData)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int startGenericRecognition(java.util.UUID,android.hardware.soundtrigger.SoundTrigger$GenericSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE AND android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int startKeyphraseRecognition(int,android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE AND android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int startRecognition(android.hardware.soundtrigger.SoundTrigger$SoundModel,com.android.server.soundtrigger.SoundTriggerHelper$ModelData,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig,int)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE AND android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int startRecognitionLocked(com.android.server.soundtrigger.SoundTriggerHelper$ModelData,boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int stopGenericRecognition(java.util.UUID,android.hardware.soundtrigger.IRecognitionStatusCallback)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int stopKeyphraseRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int stopRecognition(com.android.server.soundtrigger.SoundTriggerHelper$ModelData,android.hardware.soundtrigger.IRecognitionStatusCallback)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int stopRecognitionLocked(com.android.server.soundtrigger.SoundTriggerHelper$ModelData,boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int tryStopAndUnloadLocked(com.android.server.soundtrigger.SoundTriggerHelper$ModelData,boolean,boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int unloadGenericSoundModel(java.util.UUID)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int unloadKeyphraseSoundModel(int)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: int updateRecognitionLocked(com.android.server.soundtrigger.SoundTriggerHelper$ModelData,boolean,boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void <init>(android.content.Context)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void forceStopAndUnloadModelLocked(com.android.server.soundtrigger.SoundTriggerHelper$ModelData,java.lang.Exception)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void forceStopAndUnloadModelLocked(com.android.server.soundtrigger.SoundTriggerHelper$ModelData,java.lang.Exception,java.util.Iterator)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void initializeTelephonyAndPowerStateListeners()  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void onCallStateChangedLocked(boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void onGenericRecognitionSuccessLocked(android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void onKeyphraseRecognitionSuccessLocked(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void onPowerSaveModeChangedLocked(boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void onRecognitionAbortLocked(android.hardware.soundtrigger.SoundTrigger$RecognitionEvent)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void onServiceStateChangedLocked(boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void stopAndUnloadDeadModelsLocked()  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.soundtrigger.SoundTriggerHelper: void updateAllRecognitionsLocked(boolean)  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
com.android.server.wm.ScreenRotationAnimation: void <init>(android.content.Context,com.android.server.wm.DisplayContent,android.view.SurfaceSession,boolean,boolean,boolean,com.android.server.wm.WindowManagerService)  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
