<android.hardware.ICameraService$Stub$Proxy: android.hardware.ICamera connect(android.hardware.ICameraClient,int,java.lang.String,int,int)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.ICameraService$Stub$Proxy: android.hardware.camera2.ICameraDeviceUser connectDevice(android.hardware.camera2.ICameraDeviceCallbacks,java.lang.String,java.lang.String,int)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraDevice openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,java.util.concurrent.Executor,int)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.camera2.CameraManager: void openCameraForUid(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,java.util.concurrent.Executor,int)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.ICameraService$Stub$Proxy: android.hardware.ICamera connectLegacy(android.hardware.ICameraClient,int,int,java.lang.String,int)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.ICameraService$Stub$Proxy: java.lang.String getLegacyParameters(int)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>  ::  [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [callingPid==getpid() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_MEDIA AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [callingPid==getpid() AND uid==AID_RADIO AND callingPid==getpid()] OR [callingPid==getpid() AND uid==AID_RADIO AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND clientUid!=USE_CALLING_UID AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_MEDIA AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_CAMERASERVER AND android.permission.CAMERA] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND callingPid==getpid()] OR [mAllowedUsers.find(clientUserId)!=mAllowedUsers.end() AND uid==AID_RADIO AND android.permission.CAMERA]
<android.media.MediaRecorder: void setAudioSource(int)>  ::  [android.permission.RECORD_AUDIO]
<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()>  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)>  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)>  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)>  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)>  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)>  ::  [android.permission.RECORD_AUDIO AND vs == VIDEO_SOURCE_SURFACE] OR [android.permission.RECORD_AUDIO AND android.permission.CAMERA]
<android.media.MediaRecorder: void setVideoSource(int)>  ::  [vs == VIDEO_SOURCE_SURFACE] OR [android.permission.CAMERA]
<android.hardware.SystemSensorManager: int nativeSetOperationParameter(long,int,int,float[],int[])>  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
<android.hardware.SystemSensorManager: boolean setOperationParameterImpl(android.hardware.SensorAdditionalInfo)>  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
<android.hardware.SensorManager: boolean setOperationParameter(android.hardware.SensorAdditionalInfo)>  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
<com.android.server.SensorNotificationService: void onLocationChanged(android.location.Location)>  ::  [android.permission.LOCATION_HARDWARE AND PLATFORM_SIGNATURE]
<android.media.MediaPlayer: void nativeSetDataSource(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[])>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.lang.String[],java.lang.String[],java.util.List)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map,java.util.List)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.Ringtone: void setUri(android.net.Uri,android.media.VolumeShaper$Configuration)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int,android.media.VolumeShaper$Configuration)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,android.media.VolumeShaper$Configuration)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.Ringtone: void setUri(android.net.Uri)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.Ringtone: void setStreamType(int)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.media.MediaPlayer: void setDataSource(java.lang.String)>  ::  [android.permission.INTERNET AND strncmp(url, "http://", 7) == 0] OR [android.permission.INTERNET AND strncmp(url, "https://", 8) == 0] OR [android.permission.INTERNET AND strncmp(url, "rtsp://", 7) == 0)]
<android.view.SurfaceControl: void nativeApplyTransaction(long,boolean)>  ::  [android.permission.ACCESS_SURFACE_FLINGER AND PLATFORM_SIGNATURE] OR [uid == AID_GRAPHICS] OR [uid == AID_SYSTEM]
<android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer nativeScreenshot(android.os.IBinder,android.graphics.Rect,int,int,boolean,int,boolean)>  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
<android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBuffer(android.os.IBinder,android.graphics.Rect,int,int,boolean,int)>  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
<android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,boolean,int)>  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
<android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface)>  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
<android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,boolean,int)>  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
<android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,int)>  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
<android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBufferWithSecureLayersUnsafe(android.os.IBinder,android.graphics.Rect,int,int,boolean,int)>  ::  [uid == AID_GRAPHICS] OR [android.permission.READ_FRAME_BUFFER AND PLATFORM_SIGNATURE]
<android.hardware.soundtrigger.SoundTrigger: int listModules(java.util.ArrayList)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<com.android.server.soundtrigger.SoundTriggerHelper: void <init>(android.content.Context)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<com.android.server.soundtrigger.SoundTriggerHelper: void initializeTelephonyAndPowerStateListeners()>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<com.android.server.soundtrigger.SoundTriggerHelper: int startRecognition(android.hardware.soundtrigger.SoundTrigger$SoundModel,com.android.server.soundtrigger.SoundTriggerHelper$ModelData,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig,int)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<com.android.server.soundtrigger.SoundTriggerHelper: int startGenericRecognition(java.util.UUID,android.hardware.soundtrigger.SoundTrigger$GenericSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<com.android.server.soundtrigger.SoundTriggerHelper: int startKeyphraseRecognition(int,android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<android.hardware.soundtrigger.SoundTrigger: int listModules(java.lang.String,java.util.ArrayList)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<android.hardware.soundtrigger.SoundTriggerModule: void native_setup(java.lang.String,java.lang.Object)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<android.hardware.soundtrigger.SoundTriggerModule: void <init>(int,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<android.hardware.soundtrigger.SoundTriggerModule$NativeEventHandlerDelegate: void <init>(android.hardware.soundtrigger.SoundTriggerModule,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<android.hardware.soundtrigger.SoundTrigger: android.hardware.soundtrigger.SoundTriggerModule attachModule(int,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Handler)>  ::  [android.permission.CAPTURE_AUDIO_HOTWORD AND PLATFORM_SIGNATURE]
<android.media.AudioSystem: int muteMicrophone(boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void readUserRestrictions()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void <init>(android.content.Context)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void createAudioSystemThread()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$AudioHandler: void onPlaySoundEffect(int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$AudioSystemThread: void run()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void onSetVolumeIndexOnDevice(com.android.server.audio.AudioService$DeviceVolumeUpdate)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$AudioHandler: void handleMessage(android.os.Message)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void checkAllAliasStreamVolumes()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void createStreamStates()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void readAudioSettings(boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void reloadAudioSettings()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void reloadAudioSettings()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void reloadAudioSettings()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void handleConfigurationChanged(android.content.Context)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void updateStreamVolumeAlias(boolean,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void updateA11yVolumeAlias(boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void initA11yMonitoring()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void onSystemReady()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void setMode(int,android.os.IBinder,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void setMode(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$SoundPoolListenerThread: void run()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$AudioHandler: boolean onLoadSoundEffects()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void forceVolumeControlStream(int,android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void forceVolumeControlStream(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void setStreamVolume(int,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.MediaRouter$RouteInfo: void requestUpdateVolume(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.MediaRouter$RouteGroup: void requestUpdateVolume(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.MediaRouter$RouteInfo: void requestSetVolume(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.MediaRouter$RouteGroup: void requestSetVolume(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.BtHelper: com.android.server.audio.BtHelper$ScoClient getScoClient(android.os.IBinder,boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.BtHelper: void startBluetoothScoForClient(android.os.IBinder,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker: void startBluetoothScoForClient_Sync(android.os.IBinder,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void startBluetoothScoInt(android.os.IBinder,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void startBluetoothSco()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void startBluetoothScoVirtualCall()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.BtHelper: void stopBluetoothScoForClient(android.os.IBinder,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker: void stopBluetoothScoForClient_Sync(android.os.IBinder,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void stopBluetoothSco(android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void stopBluetoothSco()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.BtHelper: void <init>(com.android.server.audio.AudioDeviceBroker)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker: void <init>(android.content.Context,com.android.server.audio.AudioService)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker: void <init>(android.content.Context,com.android.server.audio.AudioService,com.android.server.audio.AudioDeviceInventory)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker$BrokerThread: void run()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker: void setupMessaging(android.content.Context)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker: void init()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceInventory: int setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceBroker: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceInventory: void onToggleHdmi()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioDeviceInventory: void onSetWiredDeviceConnectionState(com.android.server.audio.AudioDeviceInventory$WiredDeviceConnectionState)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$AudioPolicyProxy: void <init>(com.android.server.audio.AudioService,android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.AudioManager: int registerAudioPolicyStatic(android.media.audiopolicy.AudioPolicy)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.AudioManager: int registerAudioPolicy(android.media.audiopolicy.AudioPolicy)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.AudioRecord$Builder: android.media.AudioRecord buildAudioPlaybackCaptureRecord()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.AudioRecord$Builder: android.media.AudioRecord build()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void setVolumeController(android.media.IVolumeController)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.os.BinderProxy: void sendDeathNotice(android.os.IBinder$DeathRecipient)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioRecord: void handleFullVolumeRec(boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioRecord: void startRecording()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING AND uid == AID_SYSTEM]
<android.media.AudioRecord: void stop()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.audiopolicy.AudioPolicy: void invalidateCaptorsAndInjectors()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void unregisterAudioPolicy(android.media.audiopolicy.AudioPolicy)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.AudioRecord: void release()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.AudioRecord: void finalize()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.AudioRecord: void <init>(int,int,int,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.AudioRecord: void <init>(long)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.AudioRecord: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.audiopolicy.AudioPolicy: android.media.AudioRecord createAudioRecordSink(android.media.audiopolicy.AudioMix)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND android.permission.RECORD_AUDIO AND uid == AID_SYSTEM]
<android.media.AudioRecord: void startRecording(android.media.MediaSyncEvent)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void binderDied()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void setAudioServerStateCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioServerStateCallback)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: boolean loadSoundEffects()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.AudioManager: void loadSoundEffects()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<android.media.IAudioService$Stub$Proxy: boolean loadSoundEffects()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService$Lifecycle: void <init>(android.content.Context)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void setMicrophoneMuteNoCallerCheck(boolean,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void setMicrophoneMute(boolean,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioManager: void setMicrophoneMute(boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void onRestoreDevices()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void makeHearingAidDeviceUnavailable(java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void onSetHearingAidConnectionState(android.bluetooth.BluetoothDevice,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory$lambda_disconnectHearingAid_5__796: void accept(java.lang.Object)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void makeHearingAidDeviceAvailable(java.lang.String,java.lang.String,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void makeA2dpSrcUnavailable(java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void onSetA2dpSourceConnectionState(com.android.server.audio.BtHelper$BluetoothA2dpDeviceInfo,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory$lambda_disconnectA2dpSink_3__794: void accept(java.lang.Object)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void makeA2dpSrcAvailable(java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void makeA2dpDeviceUnavailableNow(java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void onSetA2dpSinkConnectionState(com.android.server.audio.BtHelper$BluetoothA2dpDeviceInfo,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void onMakeA2dpDeviceUnavailableNow(java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void makeA2dpDeviceAvailable(java.lang.String,java.lang.String,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: boolean handleDeviceConnection(boolean,int,java.lang.String,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceBroker: boolean handleDeviceConnection(boolean,int,java.lang.String,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.BtHelper: boolean handleBtScoActiveDeviceChange(android.bluetooth.BluetoothDevice,boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.BtHelper: void setBtScoActiveDevice(android.bluetooth.BluetoothDevice)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.BtHelper: void receiveBtEvent(android.content.Intent)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceBroker: void receiveBtEvent(android.content.Intent)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.BtHelper: void onHeadsetProfileConnected(android.bluetooth.BluetoothHeadset)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.BtHelper: void disconnectHeadset()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceBroker$BrokerHandler: void handleMessage(android.os.Message)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int handleDeviceConfigChange(int,java.lang.String,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioDeviceInventory: void onBluetoothA2dpActiveDeviceChange(com.android.server.audio.BtHelper$BluetoothA2dpDeviceInfo,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setPhoneState(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void onAudioServerDied()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS AND android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT AND uid == AID_SYSTEM]
<android.media.AudioSystem: int initStreamVolume(int,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService$VolumeStreamState: void <init>(com.android.server.audio.AudioService,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setStreamVolumeIndex(int,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setStreamVolumeIndexAS(int,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService$VolumeStreamState: void setStreamVolumeIndex(int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService$VolumeStreamState: void applyDeviceVolume_syncVSS(int,boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void setDeviceVolume(com.android.server.audio.AudioService$VolumeStreamState,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService$VolumeStreamState: void checkFixedVolumeDevices()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void checkAddAllFixedVolumeDevices(int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void onCheckVolumeCecOnHdmiConnection(int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void checkAllFixedVolumeDevices(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void checkAllFixedVolumeDevices()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService$VolumeStreamState: void applyAllVolumes()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService$AudioHandler: void setAllVolumes(com.android.server.audio.AudioService$VolumeStreamState)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.PlaybackActivityMonitor: void checkVolumeForPrivilegedAlarm(android.media.AudioPlaybackConfiguration,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.PlaybackActivityMonitor: void playerEvent(int,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void playerEvent(int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.PlayerBase: void updateState(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.IAudioService$Stub$Proxy: void playerEvent(int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.PlaybackActivityMonitor: void releasePlayer(int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void releasePlayer(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.PlayerBase: void baseRelease()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.IAudioService$Stub$Proxy: void releasePlayer(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.PlaybackActivityMonitor: void playerDeath(int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioPlaybackConfiguration: void playerDied()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setVolumeIndexForAttributes(android.media.AudioAttributes,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setMasterVolume(float)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setMasterMute(boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void setMasterMuteInternalNoCallerCheck(boolean,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void setMasterMuteInternal(boolean,int,java.lang.String,int,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void setMasterMute(boolean,int,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioManager: void setMasterMute(boolean,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setMasterMono(boolean)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void updateMasterMono(android.content.ContentResolver)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void readPersistedSettings()>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setMasterBalance(float)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<com.android.server.audio.AudioService: void updateMasterBalance(android.content.ContentResolver)>  ::  [android.permission.MODIFY_AUDIO_SETTINGS]
<android.media.AudioSystem: int setForceUse(int,int)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<com.android.server.audio.AudioDeviceBroker: void onSetForceUse(int,int,java.lang.String)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioSystem: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioManager: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioSystem: int releaseAudioPatch(android.media.AudioPatch)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioManager: int releaseAudioPatch(android.media.AudioPatch)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioSystem: int setAudioPortConfig(android.media.AudioPortConfig)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioManager: int setAudioPortGain(android.media.AudioPort,android.media.AudioGainConfig)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioSystem: int registerPolicyMixes(java.util.ArrayList,boolean)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService$AudioPolicyProxy: void release()>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService: void unregisterAudioPolicyInt(android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.AudioManager: void unregisterAudioPolicyAsyncStatic(android.media.audiopolicy.AudioPolicy)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.AudioManager: void unregisterAudioPolicyAsync(android.media.audiopolicy.AudioPolicy)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService$AudioPolicyProxy$UnregisterOnStopCallback: void onStop()>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.IAudioService$Stub$Proxy: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.IAudioService$Stub$Proxy: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService$AudioPolicyProxy: void binderDied()>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService$AudioPolicyProxy: int connectMixes()>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService$AudioPolicyProxy: int removeMixes(java.util.ArrayList)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.audiopolicy.AudioPolicy: int detachMixes(java.util.List)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService$AudioPolicyProxy: int addMixes(java.util.ArrayList)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<com.android.server.audio.AudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.audiopolicy.AudioPolicy: int attachMixes(java.util.List)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>  ::  [android.permission.MODIFY_AUDIO_ROUTING AND android.permission.CAPTURE_MEDIA_OUTPUT]
<android.media.AudioSystem: int setUidDeviceAffinities(int,int[],java.lang.String[])>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<com.android.server.audio.AudioService$AudioPolicyProxy: int setUidDeviceAffinities(int,int[],java.lang.String[])>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<com.android.server.audio.AudioService: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.audiopolicy.AudioPolicy: boolean setUidDeviceAffinity(int,java.util.List)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioSystem: int removeUidDeviceAffinities(int)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<com.android.server.audio.AudioService$AudioPolicyProxy: int removeUidDeviceAffinities(int)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<com.android.server.audio.AudioService: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.audiopolicy.AudioPolicy: boolean removeUidDeviceAffinity(int)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>  ::  [android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioRecord: int native_start(int,int)>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioRecord: int native_setup(java.lang.Object,java.lang.Object,int[],int,int,int,int,int[],java.lang.String,long)>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<com.android.server.soundtrigger.SoundTriggerService$RemoteSoundTriggerDetectionService: android.media.AudioRecord createAudioRecordForEvent(android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent)>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<com.android.server.soundtrigger.SoundTriggerService$RemoteSoundTriggerDetectionService$lambda_onGenericSoundTriggerDetected_2__786: void run()>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioRecord: void deferred_connect(long)>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioRecord: int native_read_in_direct_buffer(java.lang.Object,int,boolean)>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int,int)>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>  ::  [android.permission.RECORD_AUDIO AND android.permission.MODIFY_AUDIO_ROUTING]
<android.media.AudioSystem: int setLowRamDevice(boolean,long)>  ::  [uid == AID_SYSTEM]
<com.android.server.audio.AudioService: void readAndSetLowRamDevice()>  ::  [uid == AID_SYSTEM]
